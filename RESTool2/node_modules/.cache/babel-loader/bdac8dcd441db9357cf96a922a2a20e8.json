{"ast":null,"code":"import _slicedToArray from \"/Users/claire/Desktop/covid-trend/RESTool2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/claire/Desktop/covid-trend/RESTool2/src/components/queryParams/queryParams.comp.tsx\";\nimport React, { useState, useEffect } from 'react';\nimport { FormRow } from '../formRow/formRow.comp';\nimport { Button } from '../button/button.comp';\nimport './queryParams.scss';\nexport const QueryParams = ({\n  initialParams,\n  paginationConfig,\n  submitCallback\n}) => {\n  const _useState = useState(initialParams),\n        _useState2 = _slicedToArray(_useState, 2),\n        queryParams = _useState2[0],\n        setQueryParams = _useState2[1];\n\n  function submit(e) {\n    if (e) {\n      e.preventDefault();\n    }\n\n    if (paginationConfig && paginationConfig.type === 'infinite-scroll') {\n      submitCallback(queryParams, true);\n    } else {\n      submitCallback(queryParams);\n    }\n  }\n\n  function formChanged(fieldName, value, submitAfterChange) {\n    const updatedQueryParams = [...queryParams].map(field => {\n      if (field.name === fieldName) {\n        field.value = value;\n      }\n\n      return field;\n    });\n    setQueryParams(updatedQueryParams);\n\n    if (submitAfterChange) {\n      submit();\n    }\n  }\n\n  useEffect(() => {\n    if (paginationConfig && paginationConfig.type === 'infinite-scroll') {\n      const filteredParams = initialParams.filter(param => !['page', 'limit'].includes(param.name));\n      setQueryParams(filteredParams);\n    } else {\n      setQueryParams(initialParams);\n    }\n  }, [paginationConfig, initialParams]);\n\n  if (!queryParams.length) {\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    });\n  }\n\n  return React.createElement(\"section\", {\n    className: \"query-params-form\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, React.createElement(\"h5\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, \"Query Params:\"), React.createElement(\"form\", {\n    onSubmit: submit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, queryParams.map((queryParam, idx) => {\n    return React.createElement(FormRow, {\n      key: `query_param_${idx}`,\n      field: queryParam,\n      onChange: formChanged,\n      showReset: !queryParam.type || queryParam.type === 'text',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    });\n  }), React.createElement(Button, {\n    type: \"submit\",\n    onClick: submit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, \"Submit\")));\n};","map":{"version":3,"sources":["/Users/claire/Desktop/covid-trend/RESTool2/src/components/queryParams/queryParams.comp.tsx"],"names":["React","useState","useEffect","FormRow","Button","QueryParams","initialParams","paginationConfig","submitCallback","queryParams","setQueryParams","submit","e","preventDefault","type","formChanged","fieldName","value","submitAfterChange","updatedQueryParams","map","field","name","filteredParams","filter","param","includes","length","queryParam","idx"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AAGA,SAASC,OAAT,QAAwB,yBAAxB;AACA,SAASC,MAAT,QAAuB,uBAAvB;AAEA,OAAO,oBAAP;AAQA,OAAO,MAAMC,WAAW,GAAG,CAAC;AAAEC,EAAAA,aAAF;AAAiBC,EAAAA,gBAAjB;AAAmCC,EAAAA;AAAnC,CAAD,KAAiE;AAAA,oBACpDP,QAAQ,CAAsBK,aAAtB,CAD4C;AAAA;AAAA,QACnFG,WADmF;AAAA,QACtEC,cADsE;;AAG1F,WAASC,MAAT,CAAgBC,CAAhB,EAAyB;AACvB,QAAIA,CAAJ,EAAO;AACLA,MAAAA,CAAC,CAACC,cAAF;AACD;;AAED,QAAIN,gBAAgB,IAAIA,gBAAgB,CAACO,IAAjB,KAA0B,iBAAlD,EAAqE;AACnEN,MAAAA,cAAc,CAACC,WAAD,EAAc,IAAd,CAAd;AACD,KAFD,MAEO;AACLD,MAAAA,cAAc,CAACC,WAAD,CAAd;AACD;AACF;;AAED,WAASM,WAAT,CAAqBC,SAArB,EAAwCC,KAAxC,EAAoDC,iBAApD,EAAiF;AAC/E,UAAMC,kBAAuC,GAAG,CAAC,GAAGV,WAAJ,EAAiBW,GAAjB,CAAsBC,KAAD,IAAW;AAC9E,UAAIA,KAAK,CAACC,IAAN,KAAeN,SAAnB,EAA8B;AAC5BK,QAAAA,KAAK,CAACJ,KAAN,GAAcA,KAAd;AACD;;AAED,aAAOI,KAAP;AACD,KAN+C,CAAhD;AAQAX,IAAAA,cAAc,CAACS,kBAAD,CAAd;;AAEA,QAAID,iBAAJ,EAAuB;AACrBP,MAAAA,MAAM;AACP;AACF;;AAEDT,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIK,gBAAgB,IAAIA,gBAAgB,CAACO,IAAjB,KAA0B,iBAAlD,EAAqE;AACnE,YAAMS,cAAc,GAAGjB,aAAa,CAACkB,MAAd,CAAqBC,KAAK,IAAI,CAAC,CAAC,MAAD,EAAS,OAAT,EAAkBC,QAAlB,CAA2BD,KAAK,CAACH,IAAjC,CAA/B,CAAvB;AACAZ,MAAAA,cAAc,CAACa,cAAD,CAAd;AACD,KAHD,MAGO;AACLb,MAAAA,cAAc,CAACJ,aAAD,CAAd;AACD;AACF,GAPQ,EAON,CAACC,gBAAD,EAAmBD,aAAnB,CAPM,CAAT;;AASA,MAAI,CAACG,WAAW,CAACkB,MAAjB,EAAyB;AACvB,WAAO,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD;;AAED,SACE;AAAS,IAAA,SAAS,EAAC,mBAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADF,EAEE;AAAM,IAAA,QAAQ,EAAEhB,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEIF,WAAW,CAACW,GAAZ,CAAgB,CAACQ,UAAD,EAAaC,GAAb,KAAqB;AACnC,WACE,oBAAC,OAAD;AACE,MAAA,GAAG,EAAG,eAAcA,GAAI,EAD1B;AAEE,MAAA,KAAK,EAAED,UAFT;AAGE,MAAA,QAAQ,EAAEb,WAHZ;AAIE,MAAA,SAAS,EAAE,CAACa,UAAU,CAACd,IAAZ,IAAoBc,UAAU,CAACd,IAAX,KAAoB,MAJrD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAQD,GATD,CAFJ,EAaE,oBAAC,MAAD;AAAQ,IAAA,IAAI,EAAC,QAAb;AAAsB,IAAA,OAAO,EAAEH,MAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAbF,CAFF,CADF;AAoBD,CAhEM","sourcesContent":["import React, { useState, useEffect } from 'react';\n\nimport { IConfigInputField, IConfigPagination } from '../../common/models/config.model';\nimport { FormRow } from '../formRow/formRow.comp';\nimport { Button } from '../button/button.comp';\n\nimport './queryParams.scss';\n\ninterface IProps {\n  initialParams: IConfigInputField[]\n  paginationConfig?: IConfigPagination\n  submitCallback: (queryParams: IConfigInputField[], reset?: boolean) => void\n}\n\nexport const QueryParams = ({ initialParams, paginationConfig, submitCallback }: IProps) => {\n  const [queryParams, setQueryParams] = useState<IConfigInputField[]>(initialParams);\n\n  function submit(e?: any) {\n    if (e) {\n      e.preventDefault();\n    }\n\n    if (paginationConfig && paginationConfig.type === 'infinite-scroll') {\n      submitCallback(queryParams, true);\n    } else {\n      submitCallback(queryParams);\n    }\n  }\n\n  function formChanged(fieldName: string, value: any, submitAfterChange?: boolean) {\n    const updatedQueryParams: IConfigInputField[] = [...queryParams].map((field) => {\n      if (field.name === fieldName) {\n        field.value = value;\n      }\n\n      return field;\n    });\n\n    setQueryParams(updatedQueryParams);\n\n    if (submitAfterChange) {\n      submit();\n    }\n  }\n\n  useEffect(() => {\n    if (paginationConfig && paginationConfig.type === 'infinite-scroll') {\n      const filteredParams = initialParams.filter(param => !['page', 'limit'].includes(param.name));\n      setQueryParams(filteredParams);\n    } else {\n      setQueryParams(initialParams);\n    }\n  }, [paginationConfig, initialParams]);\n\n  if (!queryParams.length) {\n    return <React.Fragment></React.Fragment>;\n  }\n\n  return (\n    <section className=\"query-params-form\">\n      <h5>Query Params:</h5>\n      <form onSubmit={submit}>\n        {\n          queryParams.map((queryParam, idx) => {\n            return (\n              <FormRow\n                key={`query_param_${idx}`}\n                field={queryParam}\n                onChange={formChanged}\n                showReset={!queryParam.type || queryParam.type === 'text'}\n              />\n            );\n          })\n        }\n        <Button type=\"submit\" onClick={submit}>Submit</Button>\n      </form>\n    </section>\n  );\n};"]},"metadata":{},"sourceType":"module"}