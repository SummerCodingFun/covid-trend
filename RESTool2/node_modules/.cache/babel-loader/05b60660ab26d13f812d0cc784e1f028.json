{"ast":null,"code":"import _slicedToArray from \"/Users/claire/Desktop/covid-trend/RESTool2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectSpread from \"/Users/claire/Desktop/covid-trend/RESTool2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/Users/claire/Desktop/covid-trend/RESTool2/src/components/page/page.comp.tsx\";\nimport React, { useEffect, useState } from 'react';\nimport { useParams, useHistory } from 'react-router-dom';\nimport * as QueryString from 'query-string';\nimport { toast } from 'react-toastify';\nimport { orderBy } from 'natural-orderby';\nimport { find, remove } from 'lodash';\nimport { withAppContext } from '../withContext/withContext.comp';\nimport { Loader } from '../loader/loader.comp';\nimport { dataHelpers } from '../../helpers/data.helpers';\nimport { paginationHelpers } from '../../helpers/pagination.helpers';\nimport { Table } from '../table/table.comp';\nimport { Cards } from '../cards/cards.comp';\nimport { QueryParams } from '../queryParams/queryParams.comp';\nimport { Button } from '../button/button.comp';\nimport { FormPopup } from '../formPopup/formPopup.comp';\nimport { FilterField } from '../filterField/filterField.comp';\nimport { isQueryPaginationState, isBodyPaginationState } from '../../common/models/states.types.helper';\nimport { isQueryPagination, isBodyPagination } from '../../common/models/config.types.helper';\nimport './page.scss';\n\nconst buildInitQueryParamsAndPaginationState = (initQueryParams, paginationConfig) => {\n  let initialPagination = undefined;\n\n  if (paginationConfig) {\n    if (isQueryPagination(paginationConfig)) {\n      var _paginationConfig$par, _paginationConfig$par2, _paginationConfig$par3, _paginationConfig$par4, _paginationConfig$par5, _paginationConfig$par6, _paginationConfig$par7, _paginationConfig$par8, _paginationConfig$par13, _paginationConfig$par14, _paginationConfig$par15;\n\n      initialPagination = {\n        source: paginationConfig.source,\n        type: paginationConfig.type,\n        page: parseInt(((_paginationConfig$par = paginationConfig.params) === null || _paginationConfig$par === void 0 ? void 0 : (_paginationConfig$par2 = _paginationConfig$par.page) === null || _paginationConfig$par2 === void 0 ? void 0 : _paginationConfig$par2.value) || '1'),\n        limit: parseInt(((_paginationConfig$par3 = paginationConfig.params) === null || _paginationConfig$par3 === void 0 ? void 0 : (_paginationConfig$par4 = _paginationConfig$par3.limit) === null || _paginationConfig$par4 === void 0 ? void 0 : _paginationConfig$par4.value) || '10'),\n        descending: ((_paginationConfig$par5 = paginationConfig.params) === null || _paginationConfig$par5 === void 0 ? void 0 : (_paginationConfig$par6 = _paginationConfig$par5.descending) === null || _paginationConfig$par6 === void 0 ? void 0 : _paginationConfig$par6.value) === 'true' || false,\n        hasPreviousPage: false,\n        hasNextPage: false,\n        sortBy: (_paginationConfig$par7 = paginationConfig.params) === null || _paginationConfig$par7 === void 0 ? void 0 : (_paginationConfig$par8 = _paginationConfig$par7.sortBy) === null || _paginationConfig$par8 === void 0 ? void 0 : _paginationConfig$par8.value\n      };\n\n      if (!find(initQueryParams, {\n        name: 'page'\n      })) {\n        var _paginationConfig$par9, _paginationConfig$par10, _paginationConfig$par11, _paginationConfig$par12, _initialPagination;\n\n        initQueryParams.push({\n          name: paginationConfig === null || paginationConfig === void 0 ? void 0 : (_paginationConfig$par9 = paginationConfig.params) === null || _paginationConfig$par9 === void 0 ? void 0 : (_paginationConfig$par10 = _paginationConfig$par9.page) === null || _paginationConfig$par10 === void 0 ? void 0 : _paginationConfig$par10.name,\n          label: (paginationConfig === null || paginationConfig === void 0 ? void 0 : (_paginationConfig$par11 = paginationConfig.params) === null || _paginationConfig$par11 === void 0 ? void 0 : (_paginationConfig$par12 = _paginationConfig$par11.page) === null || _paginationConfig$par12 === void 0 ? void 0 : _paginationConfig$par12.label) || 'Page',\n          value: (_initialPagination = initialPagination) === null || _initialPagination === void 0 ? void 0 : _initialPagination.page\n        });\n      }\n\n      if ((paginationConfig === null || paginationConfig === void 0 ? void 0 : (_paginationConfig$par13 = paginationConfig.params) === null || _paginationConfig$par13 === void 0 ? void 0 : _paginationConfig$par13.limit) && !find(initQueryParams, {\n        name: 'limit'\n      })) {\n        var _initialPagination2;\n\n        initQueryParams.push({\n          name: paginationConfig.params.limit.name,\n          label: paginationConfig.params.limit.label || 'Limit',\n          value: (_initialPagination2 = initialPagination) === null || _initialPagination2 === void 0 ? void 0 : _initialPagination2.limit\n        });\n      }\n\n      if ((paginationConfig === null || paginationConfig === void 0 ? void 0 : (_paginationConfig$par14 = paginationConfig.params) === null || _paginationConfig$par14 === void 0 ? void 0 : _paginationConfig$par14.descending) && !find(initQueryParams, {\n        name: 'descending'\n      })) {\n        var _initialPagination3;\n\n        initQueryParams.push({\n          name: paginationConfig.params.descending.name,\n          label: paginationConfig.params.descending.label || 'Descending',\n          value: (_initialPagination3 = initialPagination) === null || _initialPagination3 === void 0 ? void 0 : _initialPagination3.descending\n        });\n      }\n\n      if ((paginationConfig === null || paginationConfig === void 0 ? void 0 : (_paginationConfig$par15 = paginationConfig.params) === null || _paginationConfig$par15 === void 0 ? void 0 : _paginationConfig$par15.sortBy) && !find(initQueryParams, {\n        name: 'sortBy'\n      })) {\n        var _initialPagination4;\n\n        initQueryParams.push({\n          name: paginationConfig.params.sortBy.name,\n          label: 'Sort by',\n          value: (_initialPagination4 = initialPagination) === null || _initialPagination4 === void 0 ? void 0 : _initialPagination4.sortBy\n        });\n      }\n    } else if (isBodyPagination(paginationConfig)) {\n      var _paginationConfig$par16, _paginationConfig$par17, _paginationConfig$par18;\n\n      initialPagination = {\n        source: 'body',\n        type: paginationConfig.type,\n        hasNextPage: false,\n        hasPreviousPage: false,\n        next: null,\n        previous: null,\n        limit: parseInt(((_paginationConfig$par16 = paginationConfig.params) === null || _paginationConfig$par16 === void 0 ? void 0 : (_paginationConfig$par17 = _paginationConfig$par16.limit) === null || _paginationConfig$par17 === void 0 ? void 0 : _paginationConfig$par17.value) || '10')\n      };\n\n      if ((paginationConfig === null || paginationConfig === void 0 ? void 0 : (_paginationConfig$par18 = paginationConfig.params) === null || _paginationConfig$par18 === void 0 ? void 0 : _paginationConfig$par18.limit) && !find(initQueryParams, {\n        name: 'limit'\n      })) {\n        var _initialPagination5;\n\n        initQueryParams.push({\n          name: paginationConfig.params.limit.name,\n          label: paginationConfig.params.limit.label || 'Limit',\n          value: (_initialPagination5 = initialPagination) === null || _initialPagination5 === void 0 ? void 0 : _initialPagination5.limit\n        });\n      }\n    } else {\n      throw new Error('unrecognized pagination');\n    }\n  }\n\n  return {\n    initQueryParams,\n    initialPagination\n  };\n};\n\nconst PageComp = ({\n  context\n}) => {\n  var _customLabels$buttons, _customLabels$formTit, _customLabels$formTit2, _openedPopup$config;\n\n  const _useParams = useParams(),\n        page = _useParams.page;\n\n  const _useHistory = useHistory(),\n        push = _useHistory.push,\n        location = _useHistory.location;\n\n  const activePage = context.activePage,\n        error = context.error,\n        setError = context.setError,\n        httpService = context.httpService,\n        config = context.config;\n  const pageHeaders = (activePage === null || activePage === void 0 ? void 0 : activePage.requestHeaders) || {};\n  const pageMethods = activePage === null || activePage === void 0 ? void 0 : activePage.methods;\n  const customActions = (activePage === null || activePage === void 0 ? void 0 : activePage.customActions) || [];\n  const getAllConfig = pageMethods === null || pageMethods === void 0 ? void 0 : pageMethods.getAll;\n  const paginationConfig = getAllConfig === null || getAllConfig === void 0 ? void 0 : getAllConfig.pagination;\n  const infiniteScroll = (paginationConfig === null || paginationConfig === void 0 ? void 0 : paginationConfig.type) === 'infinite-scroll';\n  const getSingleConfig = pageMethods === null || pageMethods === void 0 ? void 0 : pageMethods.getSingle;\n  const postConfig = pageMethods === null || pageMethods === void 0 ? void 0 : pageMethods.post;\n  const putConfig = pageMethods === null || pageMethods === void 0 ? void 0 : pageMethods.put;\n  const deleteConfig = pageMethods === null || pageMethods === void 0 ? void 0 : pageMethods.delete;\n\n  const customLabels = _objectSpread({}, config === null || config === void 0 ? void 0 : config.customLabels, {}, activePage === null || activePage === void 0 ? void 0 : activePage.customLabels);\n\n  const addItemLabel = (customLabels === null || customLabels === void 0 ? void 0 : (_customLabels$buttons = customLabels.buttons) === null || _customLabels$buttons === void 0 ? void 0 : _customLabels$buttons.addItem) || '+ Add Item';\n  const addItemFormTitle = (customLabels === null || customLabels === void 0 ? void 0 : (_customLabels$formTit = customLabels.formTitles) === null || _customLabels$formTit === void 0 ? void 0 : _customLabels$formTit.addItem) || 'Add Item';\n  const editItemFormTitle = (customLabels === null || customLabels === void 0 ? void 0 : (_customLabels$formTit2 = customLabels.formTitles) === null || _customLabels$formTit2 === void 0 ? void 0 : _customLabels$formTit2.editItem) || 'Update Item';\n\n  const _buildInitQueryParams = buildInitQueryParamsAndPaginationState((getAllConfig === null || getAllConfig === void 0 ? void 0 : getAllConfig.queryParams) || [], paginationConfig),\n        initQueryParams = _buildInitQueryParams.initQueryParams,\n        initialPagination = _buildInitQueryParams.initialPagination;\n\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        loading = _useState2[0],\n        setLoading = _useState2[1];\n\n  const _useState3 = useState(null),\n        _useState4 = _slicedToArray(_useState3, 2),\n        openedPopup = _useState4[0],\n        setOpenedPopup = _useState4[1];\n\n  const _useState5 = useState(initQueryParams),\n        _useState6 = _slicedToArray(_useState5, 2),\n        queryParams = _useState6[0],\n        setQueryParams = _useState6[1];\n\n  const _useState7 = useState(initialPagination),\n        _useState8 = _slicedToArray(_useState7, 2),\n        pagination = _useState8[0],\n        setPagination = _useState8[1];\n\n  const _useState9 = useState([]),\n        _useState10 = _slicedToArray(_useState9, 2),\n        items = _useState10[0],\n        setItems = _useState10[1];\n\n  const _useState11 = useState(''),\n        _useState12 = _slicedToArray(_useState11, 2),\n        filter = _useState12[0],\n        setFilter = _useState12[1];\n\n  function closeFormPopup(refreshData = false) {\n    setOpenedPopup(null);\n\n    if (refreshData === true) {\n      if ((pagination === null || pagination === void 0 ? void 0 : pagination.type) === 'infinite-scroll') {\n        setItems([]);\n        const updatedParams = [...queryParams];\n        remove(updatedParams, param => ['page', 'limit'].includes(param.name));\n        setQueryParams(buildInitQueryParamsAndPaginationState(updatedParams, paginationConfig).initQueryParams);\n      } else {\n        getAllRequest();\n      }\n    }\n  }\n\n  async function openEditPopup(rawData) {\n    const params = {\n      rawData,\n      type: 'update',\n      title: editItemFormTitle,\n      config: putConfig,\n      getSingleConfig,\n      submitCallback: async (body, containFiles) => {\n        return await updateItem(body, rawData, containFiles);\n      }\n    };\n    setOpenedPopup(params);\n  }\n\n  function openCustomActionPopup(rawData, action) {\n    const params = {\n      rawData,\n      type: 'action',\n      title: action.name || 'Custom Action',\n      config: action,\n      submitCallback: async (body, containFiles) => {\n        return await performAction(body, rawData, action, containFiles);\n      }\n    };\n    setOpenedPopup(params);\n  }\n\n  async function performAction(body, rawData, action, containFiles) {\n    const url = action.url,\n          requestHeaders = action.requestHeaders,\n          actualMethod = action.actualMethod;\n    return await httpService.fetch({\n      method: actualMethod || 'put',\n      origUrl: url,\n      rawData,\n      body: containFiles ? body : JSON.stringify(body),\n      headers: _objectSpread({}, pageHeaders, {}, requestHeaders || {}, {}, containFiles ? {} : {\n        'content-type': 'application/json'\n      }),\n      responseType: 'boolean'\n    });\n  }\n\n  function extractQueryParams(params) {\n    if (!paginationConfig || isQueryPagination(paginationConfig)) {\n      const parsedParams = QueryString.parse(location.search);\n      const finalQueryParams = params.map(queryParam => {\n        if (typeof parsedParams[queryParam.name] !== 'undefined') {\n          queryParam.value = queryParam.type === 'boolean' ? parsedParams[queryParam.name] === 'true' : decodeURIComponent(parsedParams[queryParam.name]);\n        } else {\n          queryParam.value = queryParam.value || '';\n        }\n\n        return queryParam;\n      });\n      setPagination(getUpdatedPaginationState(finalQueryParams, null));\n      return finalQueryParams;\n    } else {\n      return params;\n    }\n  }\n\n  async function fetchPageData(params) {\n    const result = await httpService.fetch({\n      method: params.actualMethod || 'get',\n      origUrl: params.url,\n      queryParams,\n      headers: Object.assign({}, pageHeaders, params.requestHeaders || {})\n    });\n    let extractedData = dataHelpers.extractDataByDataPath(result, params.dataPath);\n\n    if (!extractedData) {\n      throw new Error('Could not extract data from response.');\n    }\n\n    if (!Array.isArray(extractedData)) {\n      throw new Error('Extracted data is invalid.');\n    }\n\n    if (typeof params.dataTransform === 'function') {\n      extractedData = await params.dataTransform(extractedData);\n    }\n\n    const orderedItems = orderBy(extractedData, typeof params.sortBy === 'string' ? [params.sortBy] : params.sortBy || []);\n\n    if (paginationConfig) {\n      var _paginationConfig$fie;\n\n      const total = ((_paginationConfig$fie = paginationConfig.fields) === null || _paginationConfig$fie === void 0 ? void 0 : _paginationConfig$fie.total) ? dataHelpers.extractDataByDataPath(result, paginationConfig.fields.total.dataPath) : undefined;\n      const newPaginationState = getUpdatedPaginationState(queryParams, result, total);\n\n      if (newPaginationState) {\n        setPagination(newPaginationState);\n      }\n    }\n\n    if (infiniteScroll) {\n      setItems([...items, ...orderedItems]);\n    } else {\n      setItems(orderedItems);\n    }\n  }\n\n  async function getAllRequest() {\n    if (infiniteScroll) {\n      if (pagination) {\n        if (isQueryPaginationState(pagination)) {\n          if ((pagination === null || pagination === void 0 ? void 0 : pagination.page) !== 1) {\n            setLoading(false);\n          }\n        } else if (isBodyPaginationState(pagination)) {\n          if (pagination.previous) {\n            setLoading(false);\n          }\n        } else {\n          throw new Error('unrecognized pagination source');\n        }\n      }\n    } else {\n      setLoading(true);\n    }\n\n    setError(null);\n\n    try {\n      if (!getAllConfig) {\n        throw new Error('Get all method is not defined.');\n      }\n\n      if (paginationConfig && !pagination) {\n        throw new Error('Pagination not initialized.');\n      }\n\n      const url = getAllConfig.url,\n            requestHeaders = getAllConfig.requestHeaders,\n            actualMethod = getAllConfig.actualMethod,\n            dataPath = getAllConfig.dataPath,\n            sortBy = getAllConfig.sortBy,\n            dataTransform = getAllConfig.dataTransform;\n      fetchPageData({\n        actualMethod: actualMethod,\n        url: url,\n        requestHeaders: requestHeaders,\n        dataPath: dataPath,\n        dataTransform: dataTransform,\n        sortBy: sortBy\n      });\n    } catch (e) {\n      setError(e.message);\n    }\n\n    setLoading(false);\n  }\n\n  async function addItem(body, containFiles) {\n    if (!postConfig) {\n      throw new Error('Post method is not defined.');\n    }\n\n    const url = postConfig.url,\n          requestHeaders = postConfig.requestHeaders,\n          actualMethod = postConfig.actualMethod;\n    return await httpService.fetch({\n      method: actualMethod || 'post',\n      origUrl: url,\n      body: containFiles ? body : JSON.stringify(body),\n      headers: _objectSpread({}, pageHeaders, {}, requestHeaders || {}, {}, containFiles ? {} : {\n        'content-type': 'application/json'\n      }),\n      responseType: 'boolean'\n    });\n  }\n\n  async function updateItem(body, rawData, containFiles) {\n    if (!putConfig) {\n      throw new Error('Put method is not defined.');\n    }\n\n    const url = putConfig.url,\n          requestHeaders = putConfig.requestHeaders,\n          actualMethod = putConfig.actualMethod;\n    return await httpService.fetch({\n      method: actualMethod || 'put',\n      origUrl: url,\n      rawData,\n      body: containFiles ? body : JSON.stringify(body),\n      headers: _objectSpread({}, pageHeaders, {}, requestHeaders || {}, {}, containFiles ? {} : {\n        'content-type': 'application/json'\n      }),\n      responseType: 'boolean'\n    });\n  }\n\n  async function deleteItem(item) {\n    const approved = window.confirm('Are you sure you want to delete this item?');\n\n    if (!approved) {\n      return;\n    }\n\n    try {\n      if (!deleteConfig) {\n        throw new Error('Delete method is not defined.');\n      }\n\n      const url = deleteConfig.url,\n            requestHeaders = deleteConfig.requestHeaders,\n            actualMethod = deleteConfig.actualMethod;\n      const success = await httpService.fetch({\n        method: actualMethod || 'delete',\n        origUrl: url,\n        rawData: item,\n        headers: Object.assign({}, pageHeaders, requestHeaders || {}),\n        responseType: 'boolean'\n      });\n\n      if (success) {\n        if ((pagination === null || pagination === void 0 ? void 0 : pagination.type) === 'infinite-scroll') {\n          setItems([]);\n          const updatedParams = [...queryParams];\n          remove(updatedParams, param => ['page', 'limit'].includes(param.name));\n          setQueryParams(buildInitQueryParamsAndPaginationState(updatedParams, paginationConfig).initQueryParams);\n        } else {\n          getAllRequest();\n        }\n      }\n    } catch (e) {\n      toast.error(e.message);\n    }\n  }\n\n  function submitQueryParams(updatedParams, reset) {\n    if (loading) {\n      return;\n    }\n\n    if (reset) {\n      setItems([]);\n      remove(updatedParams, param => ['page', 'limit'].includes(param.name));\n      updatedParams = buildInitQueryParamsAndPaginationState(updatedParams, paginationConfig).initQueryParams;\n    }\n\n    setQueryParams(updatedParams);\n    setPagination(getUpdatedPaginationState(updatedParams, null));\n    let paramsToUrl = [...updatedParams];\n\n    if ((paginationConfig === null || paginationConfig === void 0 ? void 0 : paginationConfig.type) === 'infinite-scroll') {\n      paramsToUrl = paramsToUrl.filter(param => !['page', 'limit'].includes(param.name));\n    } // Building query string\n\n\n    const queryState = paramsToUrl.map((queryParam, idx) => {\n      let value = queryParam.value;\n\n      if (queryParam.type === 'select' && value === '-- Select --') {\n        // default value means nothing was selected and thus we explicitly\n        // empty out the value in this case; otherwise the string '-- Select --'\n        // is used as the value for the given queryParams\n        value = '';\n      }\n\n      return `${idx === 0 ? '?' : ''}${queryParam.name}=${encodeURIComponent(value || '')}`;\n    }).join('&'); // Pushing query state to url\n\n    if (page && queryState) {\n      push(queryState);\n    }\n  }\n\n  function getUpdatedPaginationState(updatedParams, result, total) {\n    if (!paginationConfig) {\n      return;\n    }\n\n    if (isQueryPagination(paginationConfig)) {\n      var _paginationConfig$par19, _paginationConfig$par20, _paginationConfig$par21, _paginationConfig$par22, _paginationConfig$par23, _paginationConfig$par24, _paginationConfig$par25, _paginationConfig$par26, _updatedParams$find, _updatedParams$find2, _updatedParams$find3, _updatedParams$find4;\n\n      if (pagination && !isQueryPaginationState(pagination)) {\n        throw new Error('unexpected pagination source ' + pagination.source);\n      }\n\n      const newState = pagination ? pagination : {\n        source: 'query',\n        type: paginationConfig.type,\n        page: parseInt(((_paginationConfig$par19 = paginationConfig.params) === null || _paginationConfig$par19 === void 0 ? void 0 : (_paginationConfig$par20 = _paginationConfig$par19.page) === null || _paginationConfig$par20 === void 0 ? void 0 : _paginationConfig$par20.value) || '1'),\n        limit: parseInt(((_paginationConfig$par21 = paginationConfig.params) === null || _paginationConfig$par21 === void 0 ? void 0 : (_paginationConfig$par22 = _paginationConfig$par21.limit) === null || _paginationConfig$par22 === void 0 ? void 0 : _paginationConfig$par22.value) || '10'),\n        descending: ((_paginationConfig$par23 = paginationConfig.params) === null || _paginationConfig$par23 === void 0 ? void 0 : (_paginationConfig$par24 = _paginationConfig$par23.descending) === null || _paginationConfig$par24 === void 0 ? void 0 : _paginationConfig$par24.value) === 'true' || false,\n        hasPreviousPage: false,\n        hasNextPage: false,\n        sortBy: (_paginationConfig$par25 = paginationConfig.params) === null || _paginationConfig$par25 === void 0 ? void 0 : (_paginationConfig$par26 = _paginationConfig$par25.sortBy) === null || _paginationConfig$par26 === void 0 ? void 0 : _paginationConfig$par26.value\n      };\n      newState.total = total || (pagination === null || pagination === void 0 ? void 0 : pagination.total);\n      newState.page = parseInt((_updatedParams$find = updatedParams.find(param => {\n        var _paginationConfig$par27, _paginationConfig$par28;\n\n        return param.name === (paginationConfig === null || paginationConfig === void 0 ? void 0 : (_paginationConfig$par27 = paginationConfig.params) === null || _paginationConfig$par27 === void 0 ? void 0 : (_paginationConfig$par28 = _paginationConfig$par27.page) === null || _paginationConfig$par28 === void 0 ? void 0 : _paginationConfig$par28.name);\n      })) === null || _updatedParams$find === void 0 ? void 0 : _updatedParams$find.value) || newState.page;\n      newState.limit = parseInt((_updatedParams$find2 = updatedParams.find(param => {\n        var _paginationConfig$par29, _paginationConfig$par30;\n\n        return param.name === (paginationConfig === null || paginationConfig === void 0 ? void 0 : (_paginationConfig$par29 = paginationConfig.params) === null || _paginationConfig$par29 === void 0 ? void 0 : (_paginationConfig$par30 = _paginationConfig$par29.limit) === null || _paginationConfig$par30 === void 0 ? void 0 : _paginationConfig$par30.name);\n      })) === null || _updatedParams$find2 === void 0 ? void 0 : _updatedParams$find2.value) || newState.limit;\n      newState.descending = ((_updatedParams$find3 = updatedParams.find(param => {\n        var _paginationConfig$par31, _paginationConfig$par32;\n\n        return param.name === (paginationConfig === null || paginationConfig === void 0 ? void 0 : (_paginationConfig$par31 = paginationConfig.params) === null || _paginationConfig$par31 === void 0 ? void 0 : (_paginationConfig$par32 = _paginationConfig$par31.descending) === null || _paginationConfig$par32 === void 0 ? void 0 : _paginationConfig$par32.name);\n      })) === null || _updatedParams$find3 === void 0 ? void 0 : _updatedParams$find3.value) === 'true' || newState.descending;\n      newState.sortBy = ((_updatedParams$find4 = updatedParams.find(param => {\n        var _paginationConfig$par33, _paginationConfig$par34;\n\n        return param.name === (paginationConfig === null || paginationConfig === void 0 ? void 0 : (_paginationConfig$par33 = paginationConfig.params) === null || _paginationConfig$par33 === void 0 ? void 0 : (_paginationConfig$par34 = _paginationConfig$par33.sortBy) === null || _paginationConfig$par34 === void 0 ? void 0 : _paginationConfig$par34.name);\n      })) === null || _updatedParams$find4 === void 0 ? void 0 : _updatedParams$find4.value) || newState.sortBy;\n      newState.hasPreviousPage = paginationHelpers.hasPreviousPage(newState.page);\n      newState.hasNextPage = paginationHelpers.hasNextPage(newState.page, newState.limit, newState.total);\n      return newState;\n    } else if (isBodyPagination(paginationConfig)) {\n      var _paginationConfig$par35, _paginationConfig$par36, _updatedParams$find5;\n\n      if (pagination && !isBodyPaginationState(pagination)) {\n        throw new Error('unexpected pagination source ' + pagination.source);\n      }\n\n      const newState = pagination ? pagination : {\n        source: 'body',\n        type: paginationConfig.type,\n        next: result[paginationConfig.params.nextPath || 'next'],\n        previous: result[paginationConfig.params.prevPath || 'previous'],\n        hasNextPage: !!result[paginationConfig.params.nextPath || 'next'],\n        hasPreviousPage: !!result[paginationConfig.params.prevPath || 'previous'],\n        limit: parseInt(((_paginationConfig$par35 = paginationConfig.params) === null || _paginationConfig$par35 === void 0 ? void 0 : (_paginationConfig$par36 = _paginationConfig$par35.limit) === null || _paginationConfig$par36 === void 0 ? void 0 : _paginationConfig$par36.value) || '10'),\n        total: result[paginationConfig.params.countPath || 'count']\n      };\n\n      if (result) {\n        newState.next = result[paginationConfig.params.nextPath || 'next'];\n        newState.previous = result[paginationConfig.params.prevPath || 'previous'];\n        newState.hasNextPage = !!result[paginationConfig.params.nextPath || 'next'];\n        newState.hasPreviousPage = !!result[paginationConfig.params.prevPath || 'previous'];\n        newState.total = result[paginationConfig.params.countPath || 'count'];\n      }\n\n      newState.limit = parseInt((_updatedParams$find5 = updatedParams.find(param => {\n        var _paginationConfig$par37, _paginationConfig$par38;\n\n        return param.name === (paginationConfig === null || paginationConfig === void 0 ? void 0 : (_paginationConfig$par37 = paginationConfig.params) === null || _paginationConfig$par37 === void 0 ? void 0 : (_paginationConfig$par38 = _paginationConfig$par37.limit) === null || _paginationConfig$par38 === void 0 ? void 0 : _paginationConfig$par38.name);\n      })) === null || _updatedParams$find5 === void 0 ? void 0 : _updatedParams$find5.value) || newState.limit;\n      return newState;\n    } else {\n      throw new Error('unrecognized pagination source');\n    }\n  }\n\n  function renderItemsUI() {\n    var _getAllConfig$display;\n\n    if (loading) {\n      return React.createElement(Loader, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 498\n        },\n        __self: this\n      });\n    }\n\n    const fields = (getAllConfig === null || getAllConfig === void 0 ? void 0 : getAllConfig.fields) || (getAllConfig === null || getAllConfig === void 0 ? void 0 : (_getAllConfig$display = getAllConfig.display) === null || _getAllConfig$display === void 0 ? void 0 : _getAllConfig$display.fields) || [];\n    const fieldsToFilter = fields.filter(field => field.filterable).map(field => field.name);\n    let filteredItems = items;\n\n    if (filter && fieldsToFilter.length) {\n      filteredItems = items.filter(item => {\n        let passFilter = false;\n        fieldsToFilter.forEach(fieldName => {\n          const value = item[fieldName];\n\n          if (typeof value === 'string' && value.toLowerCase().indexOf(filter) >= 0) {\n            passFilter = true;\n          }\n        });\n        return passFilter;\n      });\n    }\n\n    if (!filteredItems.length) {\n      return React.createElement(\"div\", {\n        className: \"app-error\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 519\n        },\n        __self: this\n      }, \"Nothing to see here. Result is empty.\");\n    }\n\n    const getNextPage = paginationConfig ? () => {\n      if (isQueryPagination(paginationConfig)) {\n        if (pagination && !isQueryPaginationState(pagination)) {\n          throw new Error('unexpected pagination source ' + pagination.source);\n        }\n\n        if ((pagination === null || pagination === void 0 ? void 0 : pagination.page) && queryParams.length > 0) {\n          const newPage = (pagination === null || pagination === void 0 ? void 0 : pagination.page) + 1;\n          const updatedParams = queryParams.map(param => {\n            var _paginationConfig$par39, _paginationConfig$par40;\n\n            if (param.name === ((_paginationConfig$par39 = paginationConfig.params) === null || _paginationConfig$par39 === void 0 ? void 0 : (_paginationConfig$par40 = _paginationConfig$par39.page) === null || _paginationConfig$par40 === void 0 ? void 0 : _paginationConfig$par40.name)) {\n              return _objectSpread({}, param, {\n                value: newPage\n              });\n            }\n\n            return param;\n          });\n          submitQueryParams(updatedParams);\n        }\n      } else if (isBodyPagination(paginationConfig)) {\n        if (pagination && !isBodyPaginationState(pagination)) {\n          throw new Error('unexpected pagination source ' + pagination.source);\n        }\n\n        if (!getAllConfig || !(pagination === null || pagination === void 0 ? void 0 : pagination.next)) {\n          return;\n        }\n\n        const requestHeaders = getAllConfig.requestHeaders,\n              actualMethod = getAllConfig.actualMethod,\n              dataPath = getAllConfig.dataPath,\n              sortBy = getAllConfig.sortBy,\n              dataTransform = getAllConfig.dataTransform;\n        fetchPageData({\n          actualMethod: actualMethod,\n          url: pagination.next,\n          requestHeaders: requestHeaders,\n          dataPath: dataPath,\n          dataTransform: dataTransform,\n          sortBy: sortBy\n        });\n      } else {\n        throw new Error('unrecognized pagination source');\n      }\n    } : null;\n    const getPreviousPage = paginationConfig ? () => {\n      if (isQueryPagination(paginationConfig)) {\n        if (pagination && !isQueryPaginationState(pagination)) {\n          throw new Error('unexpected pagination source ' + pagination.source);\n        }\n\n        if ((pagination === null || pagination === void 0 ? void 0 : pagination.page) && pagination.page > 1 && queryParams.length > 0) {\n          const newPage = (pagination === null || pagination === void 0 ? void 0 : pagination.page) - 1;\n          const updatedParams = queryParams.map(param => {\n            var _paginationConfig$par41, _paginationConfig$par42;\n\n            if (param.name === ((_paginationConfig$par41 = paginationConfig.params) === null || _paginationConfig$par41 === void 0 ? void 0 : (_paginationConfig$par42 = _paginationConfig$par41.page) === null || _paginationConfig$par42 === void 0 ? void 0 : _paginationConfig$par42.name)) {\n              return _objectSpread({}, param, {\n                value: newPage\n              });\n            }\n\n            return param;\n          });\n          submitQueryParams(updatedParams);\n        }\n      } else if (isBodyPagination(paginationConfig)) {\n        if (pagination && !isBodyPaginationState(pagination)) {\n          throw new Error('unexpected pagination source ' + pagination.source);\n        }\n\n        if (!getAllConfig || !(pagination === null || pagination === void 0 ? void 0 : pagination.previous)) {\n          return;\n        }\n\n        const requestHeaders = getAllConfig.requestHeaders,\n              actualMethod = getAllConfig.actualMethod,\n              dataPath = getAllConfig.dataPath,\n              sortBy = getAllConfig.sortBy,\n              dataTransform = getAllConfig.dataTransform;\n        fetchPageData({\n          actualMethod: actualMethod,\n          url: pagination.previous,\n          requestHeaders: requestHeaders,\n          dataPath: dataPath,\n          dataTransform: dataTransform,\n          sortBy: sortBy\n        });\n      } else {\n        throw new Error('unrecognized pagination source');\n      }\n    } : null;\n    const callbacks = {\n      delete: deleteConfig ? deleteItem : null,\n      put: putConfig ? openEditPopup : null,\n      action: customActions.length ? openCustomActionPopup : () => {},\n      getNextPage,\n      getPreviousPage\n    };\n\n    if ((getAllConfig === null || getAllConfig === void 0 ? void 0 : getAllConfig.display.type) === 'cards') {\n      return React.createElement(Cards, {\n        pagination: pagination,\n        callbacks: callbacks,\n        fields: fields,\n        items: filteredItems,\n        customActions: customActions,\n        customLabels: customLabels,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 614\n        },\n        __self: this\n      });\n    }\n\n    return React.createElement(Table, {\n      pagination: pagination,\n      callbacks: callbacks,\n      fields: fields,\n      items: filteredItems,\n      customActions: customActions,\n      customLabels: customLabels,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 626\n      },\n      __self: this\n    });\n  }\n\n  function renderPaginationStateLabel() {\n    if (loading || !items.length) {\n      return;\n    }\n\n    if (!pagination || isQueryPaginationState(pagination)) {\n      var _customLabels$paginat;\n\n      const currentCountFrom = (((pagination === null || pagination === void 0 ? void 0 : pagination.page) || 1) - 1) * ((pagination === null || pagination === void 0 ? void 0 : pagination.limit) || 10) + 1;\n      const currentCountTo = currentCountFrom + items.length - 1;\n      let label = `Showing results ${currentCountFrom}-${currentCountTo} out of ${pagination === null || pagination === void 0 ? void 0 : pagination.total} items`;\n\n      if ((pagination === null || pagination === void 0 ? void 0 : pagination.type) === 'infinite-scroll') {\n        label = `Showing ${pagination === null || pagination === void 0 ? void 0 : pagination.total} items`;\n      }\n\n      if (customLabels === null || customLabels === void 0 ? void 0 : (_customLabels$paginat = customLabels.pagination) === null || _customLabels$paginat === void 0 ? void 0 : _customLabels$paginat.itemsCount) {\n        var _customLabels$paginat2;\n\n        label = customLabels === null || customLabels === void 0 ? void 0 : (_customLabels$paginat2 = customLabels.pagination) === null || _customLabels$paginat2 === void 0 ? void 0 : _customLabels$paginat2.itemsCount.replace(':currentCountFrom', currentCountFrom).replace(':currentCountTo', currentCountFrom).replace(':totalCount', pagination === null || pagination === void 0 ? void 0 : pagination.total);\n      }\n\n      return React.createElement(\"p\", {\n        className: \"center pagination-state\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 659\n        },\n        __self: this\n      }, label);\n    }\n\n    if (isBodyPaginationState(pagination)) {\n      var _customLabels$paginat3;\n\n      // TODO: extract start end end in a meaningful manner from the API\n      // this is not something that id based pagination APIs support generally\n      let label = `Total Results: ${pagination === null || pagination === void 0 ? void 0 : pagination.total}`;\n\n      if ((pagination === null || pagination === void 0 ? void 0 : pagination.type) === 'infinite-scroll') {\n        label = `Showing ${pagination === null || pagination === void 0 ? void 0 : pagination.total} items`;\n      }\n\n      if (customLabels === null || customLabels === void 0 ? void 0 : (_customLabels$paginat3 = customLabels.pagination) === null || _customLabels$paginat3 === void 0 ? void 0 : _customLabels$paginat3.itemsCount) {\n        var _customLabels$paginat4;\n\n        label = customLabels === null || customLabels === void 0 ? void 0 : (_customLabels$paginat4 = customLabels.pagination) === null || _customLabels$paginat4 === void 0 ? void 0 : _customLabels$paginat4.itemsCount.replace(':totalCount', pagination === null || pagination === void 0 ? void 0 : pagination.total);\n      }\n\n      return React.createElement(\"p\", {\n        className: \"center pagination-state\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 678\n        },\n        __self: this\n      }, label);\n    }\n  }\n\n  function renderPageContent() {\n    var _getAllConfig$display2;\n\n    const fields = (getAllConfig === null || getAllConfig === void 0 ? void 0 : getAllConfig.fields) || (getAllConfig === null || getAllConfig === void 0 ? void 0 : (_getAllConfig$display2 = getAllConfig.display) === null || _getAllConfig$display2 === void 0 ? void 0 : _getAllConfig$display2.fields) || [];\n    const fieldsToFilter = fields.filter(field => field.filterable).map(field => field.name);\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 690\n      },\n      __self: this\n    }, React.createElement(QueryParams, {\n      initialParams: queryParams,\n      paginationConfig: paginationConfig,\n      submitCallback: submitQueryParams,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 691\n      },\n      __self: this\n    }), fieldsToFilter.length > 0 && React.createElement(FilterField, {\n      onChange: setFilter,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 698\n      },\n      __self: this\n    }), (pagination === null || pagination === void 0 ? void 0 : pagination.total) && renderPaginationStateLabel(), error ? React.createElement(\"div\", {\n      className: \"app-error\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 706\n      },\n      __self: this\n    }, error) : renderItemsUI());\n  }\n\n  useEffect(() => {\n    var _context$config, _context$config$pages;\n\n    const nextActivePage = (context === null || context === void 0 ? void 0 : (_context$config = context.config) === null || _context$config === void 0 ? void 0 : (_context$config$pages = _context$config.pages) === null || _context$config$pages === void 0 ? void 0 : _context$config$pages.filter((p, pIdx) => p.id === page || pIdx + 1 === parseInt(page || ''))[0]) || null;\n    context.setActivePage(nextActivePage); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [page]);\n  useEffect(() => {\n    const _buildInitQueryParams2 = buildInitQueryParamsAndPaginationState((getAllConfig === null || getAllConfig === void 0 ? void 0 : getAllConfig.queryParams) || [], paginationConfig),\n          initQueryParams = _buildInitQueryParams2.initQueryParams,\n          initialPagination = _buildInitQueryParams2.initialPagination;\n\n    setItems([]);\n    setQueryParams(extractQueryParams(initQueryParams));\n    setPagination(initialPagination); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [activePage]);\n  useEffect(() => {\n    // Load data when query params \n    getAllRequest(); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [queryParams]);\n  return React.createElement(\"div\", {\n    className: \"app-page\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 735\n    },\n    __self: this\n  }, React.createElement(\"header\", {\n    className: \"app-page-header\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 736\n    },\n    __self: this\n  }, React.createElement(\"hgroup\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 737\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 738\n    },\n    __self: this\n  }, activePage === null || activePage === void 0 ? void 0 : activePage.name), (activePage === null || activePage === void 0 ? void 0 : activePage.description) && React.createElement(\"h4\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 741\n    },\n    __self: this\n  }, activePage === null || activePage === void 0 ? void 0 : activePage.description)), postConfig && React.createElement(Button, {\n    className: \"add-item\",\n    color: \"green\",\n    onClick: () => setOpenedPopup({\n      type: 'add',\n      title: addItemFormTitle,\n      config: postConfig,\n      submitCallback: addItem\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 746\n    },\n    __self: this\n  }, addItemLabel)), React.createElement(\"main\", {\n    className: \"app-page-content\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 749\n    },\n    __self: this\n  }, renderPageContent()), openedPopup && React.createElement(FormPopup, {\n    title: openedPopup.title,\n    closeCallback: closeFormPopup,\n    submitCallback: openedPopup.submitCallback,\n    fields: ((_openedPopup$config = openedPopup.config) === null || _openedPopup$config === void 0 ? void 0 : _openedPopup$config.fields) || [],\n    rawData: openedPopup.rawData,\n    getSingleConfig: openedPopup.getSingleConfig,\n    methodConfig: openedPopup.config,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 754\n    },\n    __self: this\n  }));\n};\n\nexport const Page = withAppContext(PageComp);","map":{"version":3,"sources":["/Users/claire/Desktop/covid-trend/RESTool2/src/components/page/page.comp.tsx"],"names":["React","useEffect","useState","useParams","useHistory","QueryString","toast","orderBy","find","remove","withAppContext","Loader","dataHelpers","paginationHelpers","Table","Cards","QueryParams","Button","FormPopup","FilterField","isQueryPaginationState","isBodyPaginationState","isQueryPagination","isBodyPagination","buildInitQueryParamsAndPaginationState","initQueryParams","paginationConfig","initialPagination","undefined","source","type","page","parseInt","params","value","limit","descending","hasPreviousPage","hasNextPage","sortBy","name","push","label","next","previous","Error","PageComp","context","location","activePage","error","setError","httpService","config","pageHeaders","requestHeaders","pageMethods","methods","customActions","getAllConfig","getAll","pagination","infiniteScroll","getSingleConfig","getSingle","postConfig","post","putConfig","put","deleteConfig","delete","customLabels","addItemLabel","buttons","addItem","addItemFormTitle","formTitles","editItemFormTitle","editItem","queryParams","loading","setLoading","openedPopup","setOpenedPopup","setQueryParams","setPagination","items","setItems","filter","setFilter","closeFormPopup","refreshData","updatedParams","param","includes","getAllRequest","openEditPopup","rawData","title","submitCallback","body","containFiles","updateItem","openCustomActionPopup","action","performAction","url","actualMethod","fetch","method","origUrl","JSON","stringify","headers","responseType","extractQueryParams","parsedParams","parse","search","finalQueryParams","map","queryParam","decodeURIComponent","getUpdatedPaginationState","fetchPageData","result","Object","assign","extractedData","extractDataByDataPath","dataPath","Array","isArray","dataTransform","orderedItems","total","fields","newPaginationState","e","message","deleteItem","item","approved","window","confirm","success","submitQueryParams","reset","paramsToUrl","queryState","idx","encodeURIComponent","join","newState","nextPath","prevPath","countPath","renderItemsUI","display","fieldsToFilter","field","filterable","filteredItems","length","passFilter","forEach","fieldName","toLowerCase","indexOf","getNextPage","newPage","getPreviousPage","callbacks","renderPaginationStateLabel","currentCountFrom","currentCountTo","itemsCount","replace","renderPageContent","nextActivePage","pages","p","pIdx","id","setActivePage","description","Page"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useParams, useHistory } from 'react-router-dom';\nimport * as QueryString from 'query-string';\nimport { toast } from 'react-toastify';\nimport { orderBy } from 'natural-orderby';\nimport { find, remove } from 'lodash';\n\nimport { IAppContext } from '../app.context';\nimport { IConfigPage, IConfigMethods, IConfigGetAllMethod, IConfigPostMethod, IConfigPutMethod, IConfigDeleteMethod, IConfigInputField, IConfigCustomAction, IConfigGetSingleMethod, ICustomLabels, IConfigPagination } from '../../common/models/config.model';\nimport { IPaginationState, IQueryPaginationState, IBodyPaginationState } from '../../common/models/states.model';\nimport { withAppContext } from '../withContext/withContext.comp';\nimport { Loader } from '../loader/loader.comp';\nimport { dataHelpers } from '../../helpers/data.helpers';\nimport { paginationHelpers } from '../../helpers/pagination.helpers';\nimport { Table } from '../table/table.comp';\nimport { Cards } from '../cards/cards.comp';\nimport { QueryParams } from '../queryParams/queryParams.comp';\nimport { Button } from '../button/button.comp';\nimport { FormPopup } from '../formPopup/formPopup.comp';\nimport { FilterField } from '../filterField/filterField.comp';\nimport { isQueryPaginationState, isBodyPaginationState } from '../../common/models/states.types.helper';\nimport { isQueryPagination, isBodyPagination } from '../../common/models/config.types.helper';\n\nimport './page.scss';\n\ninterface IProps {\n  context: IAppContext\n}\n\ninterface IPopupProps {\n  type: 'add' | 'update' | 'action'\n  title: string\n  config: IConfigPostMethod | IConfigPutMethod\n  submitCallback: (body: any, containFiles: boolean) => void\n  getSingleConfig?: IConfigGetSingleMethod\n  rawData?: {}\n}\n\nconst buildInitQueryParamsAndPaginationState = (\n  initQueryParams: IConfigInputField[],\n  paginationConfig?: IConfigPagination,\n): {\n  initQueryParams: IConfigInputField[],\n  initialPagination?: IPaginationState,\n} => {\n    let initialPagination: IPaginationState | undefined = undefined;\n\n    if (paginationConfig) {\n      if(isQueryPagination(paginationConfig)) {\n        initialPagination = {\n          source: paginationConfig.source,\n          type: paginationConfig.type,\n          page: parseInt(paginationConfig.params?.page?.value || '1'),\n          limit: parseInt(paginationConfig.params?.limit?.value || '10'),\n          descending: paginationConfig.params?.descending?.value === 'true' || false,\n          hasPreviousPage: false,\n          hasNextPage: false,\n          sortBy: paginationConfig.params?.sortBy?.value,\n        };\n\n        if (!find(initQueryParams, { name: 'page' })) {\n          initQueryParams.push({\n            name: paginationConfig?.params?.page?.name,\n            label: paginationConfig?.params?.page?.label || 'Page',\n            value: initialPagination?.page\n          });\n        }\n\n        if (paginationConfig?.params?.limit && !find(initQueryParams, { name: 'limit' })) {\n          initQueryParams.push({\n            name: paginationConfig.params.limit.name,\n            label: paginationConfig.params.limit.label || 'Limit',\n            value: initialPagination?.limit\n          });\n        }\n\n        if (paginationConfig?.params?.descending && !find(initQueryParams, { name: 'descending' })) {\n          initQueryParams.push({\n            name: paginationConfig.params.descending.name,\n            label: paginationConfig.params.descending.label || 'Descending',\n            value: initialPagination?.descending\n          });\n        }\n\n        if (paginationConfig?.params?.sortBy && !find(initQueryParams, { name: 'sortBy' })) {\n          initQueryParams.push({\n            name: paginationConfig.params.sortBy.name,\n            label: 'Sort by',\n            value: initialPagination?.sortBy\n          });\n        }\n      } else if(isBodyPagination(paginationConfig)) {\n        initialPagination = {\n          source: 'body',\n          type: paginationConfig.type,\n          hasNextPage: false,\n          hasPreviousPage: false,\n          next: null,\n          previous: null,\n          limit: parseInt(paginationConfig.params?.limit?.value || '10')\n        }\n\n        if (paginationConfig?.params?.limit && !find(initQueryParams, { name: 'limit' })) {\n          initQueryParams.push({\n            name: paginationConfig.params.limit.name,\n            label: paginationConfig.params.limit.label || 'Limit',\n            value: initialPagination?.limit\n          });\n        }\n\n      } else {\n        throw new Error('unrecognized pagination');\n      }\n    }\n\n    return {\n      initQueryParams,\n      initialPagination\n    };\n};\n\nconst PageComp = ({ context }: IProps) => {\n  const { page } = useParams();\n  const { push, location } = useHistory();\n  const { activePage, error, setError, httpService, config } = context;\n  const pageHeaders: any = activePage?.requestHeaders || {};\n  const pageMethods: IConfigMethods | undefined = activePage?.methods;\n  const customActions: IConfigCustomAction[] = activePage?.customActions || [];\n  const getAllConfig: IConfigGetAllMethod | undefined = pageMethods?.getAll;\n  const paginationConfig = getAllConfig?.pagination;\n  const infiniteScroll = paginationConfig?.type === 'infinite-scroll';\n  const getSingleConfig: IConfigGetSingleMethod | undefined = pageMethods?.getSingle;\n  const postConfig: IConfigPostMethod | undefined = pageMethods?.post;\n  const putConfig: IConfigPutMethod | undefined = pageMethods?.put;\n  const deleteConfig: IConfigDeleteMethod | undefined = pageMethods?.delete;\n  const customLabels: ICustomLabels | undefined = { ...config?.customLabels, ...activePage?.customLabels };\n  const addItemLabel = customLabels?.buttons?.addItem || '+ Add Item';\n  const addItemFormTitle = customLabels?.formTitles?.addItem || 'Add Item';\n  const editItemFormTitle = customLabels?.formTitles?.editItem || 'Update Item';\n  const { initQueryParams, initialPagination } = buildInitQueryParamsAndPaginationState(getAllConfig?.queryParams || [], paginationConfig);\n  const [loading, setLoading] = useState<boolean>(false);\n  const [openedPopup, setOpenedPopup] = useState<null | IPopupProps>(null);\n  const [queryParams, setQueryParams] = useState<IConfigInputField[]>(initQueryParams);\n  const [pagination, setPagination] = useState<IPaginationState | undefined>(initialPagination);\n  const [items, setItems] = useState<any[]>([]);\n  const [filter, setFilter] = useState<string>('');\n\n  function closeFormPopup(refreshData: boolean = false) {\n    setOpenedPopup(null);\n\n    if (refreshData === true) {\n      if (pagination?.type === 'infinite-scroll') {\n        setItems([]);\n        const updatedParams = [...queryParams];\n        remove(updatedParams, param => ['page', 'limit'].includes(param.name));\n        setQueryParams(buildInitQueryParamsAndPaginationState(updatedParams, paginationConfig).initQueryParams);\n      } else {\n        getAllRequest();\n      }\n    }\n  }\n\n  async function openEditPopup(rawData: any) {\n    const params: IPopupProps = {\n      rawData,\n      type: 'update',\n      title: editItemFormTitle,\n      config: putConfig as IConfigPutMethod,\n      getSingleConfig,\n      submitCallback: async (body: any, containFiles: boolean) => {\n        return await updateItem(body, rawData, containFiles);\n      }\n    };\n\n    setOpenedPopup(params);\n  }\n\n  function openCustomActionPopup(rawData: any, action: IConfigCustomAction) {\n    const params: IPopupProps = {\n      rawData,\n      type: 'action',\n      title: action.name || 'Custom Action',\n      config: action as IConfigCustomAction,\n      submitCallback: async (body: any, containFiles: boolean) => {\n        return await performAction(body, rawData, action, containFiles);\n      }\n    };\n\n    setOpenedPopup(params);\n  }\n\n  async function performAction(body: any, rawData: any, action: IConfigCustomAction, containFiles: boolean) {\n    const { url, requestHeaders, actualMethod } = action;\n\n    return await httpService.fetch({\n      method: actualMethod || 'put',\n      origUrl: url,\n      rawData,\n      body: containFiles ? body : JSON.stringify(body),\n      headers: {\n        ...pageHeaders,\n        ...(requestHeaders || {}),\n        ...(containFiles ? {} : { 'content-type': 'application/json' })\n      },\n      responseType: 'boolean'\n    });\n  }\n\n  function extractQueryParams(params: IConfigInputField[]): IConfigInputField[] {\n    if(!paginationConfig || isQueryPagination(paginationConfig)) {\n      const parsedParams = QueryString.parse(location.search);\n      const finalQueryParams = params.map((queryParam) => {\n        if (typeof parsedParams[queryParam.name] !== 'undefined') {\n          queryParam.value = queryParam.type === 'boolean' ? (parsedParams[queryParam.name] === 'true') : decodeURIComponent(parsedParams[queryParam.name] as any);\n        } else {\n          queryParam.value = queryParam.value || '';\n        }\n        return queryParam;\n      });\n\n      setPagination(getUpdatedPaginationState(finalQueryParams, null))\n\n      return finalQueryParams;\n    } else {\n      return params;\n    }\n  }\n\n  async function fetchPageData(params: {\n    actualMethod: 'get' | 'put' | 'post' | 'patch' | 'delete', \n    url: string,\n    requestHeaders?: any,\n    dataPath: string,\n    dataTransform: any,\n    sortBy: any\n  }) {\n    const result = await httpService.fetch({\n      method: params.actualMethod || 'get',\n      origUrl: params.url,\n      queryParams,\n      headers: Object.assign({}, pageHeaders, params.requestHeaders || {})\n    });\n    let extractedData = dataHelpers.extractDataByDataPath(result, params.dataPath);\n\n    if (!extractedData) {\n      throw new Error('Could not extract data from response.');\n    }\n\n    if (!Array.isArray(extractedData)) {\n      throw new Error('Extracted data is invalid.');\n    }\n\n    if (typeof params.dataTransform === 'function') {\n      extractedData = await params.dataTransform(extractedData);\n    }\n\n    const orderedItems = orderBy(extractedData, typeof params.sortBy === 'string' ? [params.sortBy] : (params.sortBy || []));\n\n    if (paginationConfig) {\n      const total = paginationConfig.fields?.total ? dataHelpers.extractDataByDataPath(result, paginationConfig.fields.total.dataPath) : undefined;\n      const newPaginationState = getUpdatedPaginationState(queryParams, result, total);\n      if (newPaginationState) {\n        setPagination(newPaginationState);\n      }\n    }\n\n    if (infiniteScroll) {\n      setItems([...items, ...orderedItems]);\n    } else {\n      setItems(orderedItems);\n    }\n  }\n\n  async function getAllRequest() {\n    if (infiniteScroll) {\n      if(pagination) {\n        if(isQueryPaginationState(pagination)) {\n          if(pagination?.page !== 1) {\n            setLoading(false);\n          }\n        } else if( isBodyPaginationState(pagination)) {\n          if(pagination.previous) {\n            setLoading(false);\n          }\n        } else {\n          throw new Error('unrecognized pagination source');\n        }\n      }\n    } else {\n      setLoading(true);\n    }\n\n    setError(null);\n\n    try {\n      if (!getAllConfig) {\n        throw new Error('Get all method is not defined.');\n      }\n\n      if (paginationConfig && !pagination) {\n        throw new Error('Pagination not initialized.');\n      }\n\n      const { url, requestHeaders, actualMethod, dataPath, sortBy, dataTransform } = getAllConfig;\n      fetchPageData(\n        {\n          actualMethod: actualMethod,\n          url: url,\n          requestHeaders: requestHeaders,\n          dataPath: dataPath,\n          dataTransform: dataTransform,\n          sortBy: sortBy\n        }\n      )\n\n    } catch (e) {\n      setError(e.message);\n    }\n\n    setLoading(false);\n  }\n\n  async function addItem(body: any, containFiles?: boolean) {\n    if (!postConfig) {\n      throw new Error('Post method is not defined.');\n    }\n\n    const { url, requestHeaders, actualMethod } = postConfig;\n\n    return await httpService.fetch({\n      method: actualMethod || 'post',\n      origUrl: url,\n      body: containFiles ? body : JSON.stringify(body),\n      headers: {\n        ...pageHeaders,\n        ...(requestHeaders || {}),\n        ...(containFiles ? {} : { 'content-type': 'application/json' })\n      },\n      responseType: 'boolean'\n    });\n  }\n\n  async function updateItem(body: any, rawData: any, containFiles?: boolean) {\n    if (!putConfig) {\n      throw new Error('Put method is not defined.');\n    }\n\n    const { url, requestHeaders, actualMethod } = putConfig;\n\n    return await httpService.fetch({\n      method: actualMethod || 'put',\n      origUrl: url,\n      rawData,\n      body: containFiles ? body : JSON.stringify(body),\n      headers: {\n        ...pageHeaders,\n        ...(requestHeaders || {}),\n        ...(containFiles ? {} : { 'content-type': 'application/json' })\n      },\n      responseType: 'boolean'\n    });\n  }\n\n  async function deleteItem(item: any) {\n    const approved: boolean = window.confirm('Are you sure you want to delete this item?');\n\n    if (!approved) {\n      return;\n    }\n\n    try {\n      if (!deleteConfig) {\n        throw new Error('Delete method is not defined.');\n      }\n\n      const { url, requestHeaders, actualMethod } = deleteConfig;\n      const success = await httpService.fetch({\n        method: actualMethod || 'delete',\n        origUrl: url,\n        rawData: item,\n        headers: Object.assign({}, pageHeaders, requestHeaders || {}),\n        responseType: 'boolean'\n      });\n\n      if (success) {\n        if (pagination?.type === 'infinite-scroll') {\n          setItems([]);\n          const updatedParams = [...queryParams];\n          remove(updatedParams, param => ['page', 'limit'].includes(param.name));\n          setQueryParams(buildInitQueryParamsAndPaginationState(updatedParams, paginationConfig).initQueryParams);\n        } else {\n          getAllRequest();\n        }\n      }\n    } catch (e) {\n      toast.error(e.message);\n    }\n  }\n\n  function submitQueryParams(updatedParams: IConfigInputField[], reset?: boolean) {\n    if (loading) {\n      return;\n    }\n    \n    if (reset) {\n      setItems([]);\n      remove(updatedParams, param => ['page', 'limit'].includes(param.name));\n      updatedParams = buildInitQueryParamsAndPaginationState(updatedParams, paginationConfig).initQueryParams;\n    }\n\n    setQueryParams(updatedParams);\n    setPagination(getUpdatedPaginationState(updatedParams, null));\n\n    let paramsToUrl = [...updatedParams];\n\n    if (paginationConfig?.type === 'infinite-scroll') {\n      paramsToUrl = paramsToUrl.filter(param => !['page', 'limit'].includes(param.name));\n    }\n\n    // Building query string\n    const queryState: string = paramsToUrl.map((queryParam, idx) => {\n      let value = queryParam.value;\n\n      if (queryParam.type === 'select' && value === '-- Select --') {\n          // default value means nothing was selected and thus we explicitly\n          // empty out the value in this case; otherwise the string '-- Select --'\n          // is used as the value for the given queryParams\n          value = '';\n      }\n\n      return `${idx === 0 ? '?' : ''}${queryParam.name}=${encodeURIComponent(value || '')}`;\n    }).join('&');\n\n    // Pushing query state to url\n    if (page && queryState) {\n      push(queryState);\n    }\n  }\n\n  function getUpdatedPaginationState(updatedParams: IConfigInputField[], result: any, total?: number): IPaginationState | undefined {\n    if (!paginationConfig) {\n      return;\n    }\n\n    if(isQueryPagination(paginationConfig)) {\n      if(pagination && !isQueryPaginationState(pagination)) {\n        throw new Error('unexpected pagination source ' + pagination.source)\n      }\n      const newState: IQueryPaginationState = pagination ? pagination : {\n        source: 'query',\n        type: paginationConfig.type,\n        page: parseInt(paginationConfig.params?.page?.value || '1'),\n        limit: parseInt(paginationConfig.params?.limit?.value || '10'),\n        descending: paginationConfig.params?.descending?.value === 'true' || false,\n        hasPreviousPage: false,\n        hasNextPage: false,\n        sortBy: paginationConfig.params?.sortBy?.value,\n      };\n\n      newState.total = total || pagination?.total;\n      newState.page = parseInt(updatedParams.find(param => param.name === paginationConfig?.params?.page?.name)?.value) || newState.page;\n      newState.limit = parseInt(updatedParams.find(param => param.name === paginationConfig?.params?.limit?.name)?.value) || newState.limit;\n      newState.descending = updatedParams.find(param => param.name === paginationConfig?.params?.descending?.name)?.value === 'true' || newState.descending;\n      newState.sortBy = updatedParams.find(param => param.name === paginationConfig?.params?.sortBy?.name)?.value || newState.sortBy;\n      newState.hasPreviousPage = paginationHelpers.hasPreviousPage(newState.page);\n      newState.hasNextPage = paginationHelpers.hasNextPage(newState.page, newState.limit, newState.total);\n      return newState;\n    } else if(isBodyPagination(paginationConfig)) {\n      if(pagination && !isBodyPaginationState(pagination)) {\n        throw new Error('unexpected pagination source ' + pagination.source)\n      }\n      const newState: IBodyPaginationState = pagination ? pagination : {\n        source: 'body',\n        type: paginationConfig.type,\n        next: result[paginationConfig.params.nextPath || 'next'],\n        previous: result[paginationConfig.params.prevPath || 'previous'],\n        hasNextPage: !!result[paginationConfig.params.nextPath || 'next'],\n        hasPreviousPage: !!result[paginationConfig.params.prevPath || 'previous'],\n        limit: parseInt(paginationConfig.params?.limit?.value || '10'),\n        total: result[paginationConfig.params.countPath || 'count']\n      };\n      if(result) {\n        newState.next = result[paginationConfig.params.nextPath || 'next'];\n        newState.previous = result[paginationConfig.params.prevPath || 'previous'];\n        newState.hasNextPage = !!result[paginationConfig.params.nextPath || 'next'];\n        newState.hasPreviousPage = !!result[paginationConfig.params.prevPath || 'previous'];\n        newState.total = result[paginationConfig.params.countPath || 'count'];\n      }\n      newState.limit = parseInt(updatedParams.find(param => param.name === paginationConfig?.params?.limit?.name)?.value) || newState.limit;\n      return newState;\n    } else {\n      throw new Error('unrecognized pagination source');\n    }\n  }\n\n  function renderItemsUI() {\n    if (loading) {\n      return <Loader />;\n    }\n\n    const fields = getAllConfig?.fields || getAllConfig?.display?.fields || [];\n    const fieldsToFilter = fields.filter((field) => (field.filterable)).map((field) => field.name);\n    let filteredItems = items;\n\n    if (filter && fieldsToFilter.length) {\n      filteredItems = items.filter((item) => {\n        let passFilter = false;\n        fieldsToFilter.forEach((fieldName) => {\n          const value = item[fieldName];\n          if (typeof value === 'string' && value.toLowerCase().indexOf(filter) >= 0) {\n            passFilter = true;\n          }\n        })\n        return passFilter;\n      });\n    }\n\n    if (!filteredItems.length) {\n      return <div className=\"app-error\">Nothing to see here. Result is empty.</div>;\n    }\n\n    const getNextPage = paginationConfig ? () => {\n      if(isQueryPagination(paginationConfig)) {\n        if(pagination && !isQueryPaginationState(pagination)) {\n          throw new Error('unexpected pagination source ' + pagination.source)\n        }\n        if (pagination?.page && queryParams.length > 0) {\n          const newPage = pagination?.page + 1;\n          const updatedParams = queryParams.map((param) => {\n            if (param.name === paginationConfig.params?.page?.name) {\n              return {\n                ...param,\n                value: newPage\n              }\n            }\n            return param;\n          });\n          submitQueryParams(updatedParams);\n        }\n      } else if(isBodyPagination(paginationConfig)) {\n        if(pagination && !isBodyPaginationState(pagination)) {\n          throw new Error('unexpected pagination source ' + pagination.source)\n        }\n        if(!getAllConfig || !pagination?.next) {\n          return;\n        }\n        const { requestHeaders, actualMethod, dataPath, sortBy, dataTransform } = getAllConfig;\n        fetchPageData(\n          {\n            actualMethod: actualMethod,\n            url: pagination.next,\n            requestHeaders: requestHeaders,\n            dataPath: dataPath,\n            dataTransform: dataTransform,\n            sortBy: sortBy\n          }\n        )\n      } else {\n        throw new Error('unrecognized pagination source');\n      }\n    } : null;\n\n    const getPreviousPage = paginationConfig ? () => {\n      if(isQueryPagination(paginationConfig)) {\n        if(pagination && !isQueryPaginationState(pagination)) {\n          throw new Error('unexpected pagination source ' + pagination.source)\n        }\n        if (pagination?.page && pagination.page > 1 && queryParams.length > 0) {\n          const newPage = pagination?.page - 1;\n          const updatedParams = queryParams.map((param) => {\n            if (param.name === paginationConfig.params?.page?.name) {\n              return {\n                ...param,\n                value: newPage\n              }\n            }\n            return param;\n          });\n          submitQueryParams(updatedParams);\n        }\n      } else if(isBodyPagination(paginationConfig)) {\n        if(pagination && !isBodyPaginationState(pagination)) {\n          throw new Error('unexpected pagination source ' + pagination.source)\n        }\n        if(!getAllConfig || !pagination?.previous) {\n          return;\n        }\n        const { requestHeaders, actualMethod, dataPath, sortBy, dataTransform } = getAllConfig;\n        fetchPageData(\n          {\n            actualMethod: actualMethod,\n            url: pagination.previous,\n            requestHeaders: requestHeaders,\n            dataPath: dataPath,\n            dataTransform: dataTransform,\n            sortBy: sortBy\n          }\n        )\n      } else {\n        throw new Error('unrecognized pagination source');\n      }\n    } : null;\n\n    const callbacks = {\n      delete: deleteConfig ? deleteItem : null,\n      put: putConfig ? openEditPopup : null,\n      action: customActions.length ? openCustomActionPopup : () => { },\n      getNextPage,\n      getPreviousPage,\n    };\n\n    if (getAllConfig?.display.type === 'cards') {\n      return (\n        <Cards\n          pagination={pagination}\n          callbacks={callbacks}\n          fields={fields}\n          items={filteredItems}\n          customActions={customActions}\n          customLabels={customLabels}\n        />\n      );\n    }\n\n    return (\n      <Table\n        pagination={pagination}\n        callbacks={callbacks}\n        fields={fields}\n        items={filteredItems}\n        customActions={customActions}\n        customLabels={customLabels}\n      />\n    );\n  }\n\n  function renderPaginationStateLabel() {\n    if (loading || !items.length) {\n      return;\n    }\n    \n    if(!pagination || isQueryPaginationState(pagination)) {\n      const currentCountFrom = (((pagination?.page || 1) - 1) * (pagination?.limit || 10)) + 1;\n      const currentCountTo = currentCountFrom + items.length - 1;\n      let label: string = `Showing results ${currentCountFrom}-${currentCountTo} out of ${pagination?.total} items`;\n\n      if (pagination?.type === 'infinite-scroll') {\n        label = `Showing ${pagination?.total} items`;\n      }\n\n      if (customLabels?.pagination?.itemsCount) {\n        label = customLabels?.pagination?.itemsCount\n                .replace(':currentCountFrom', currentCountFrom as any)\n                .replace(':currentCountTo', currentCountFrom as any)\n                .replace(':totalCount', pagination?.total as any);\n      }\n\n      return (\n        <p className=\"center pagination-state\">\n          {label}\n        </p>\n      );\n    }\n    if(isBodyPaginationState(pagination)) {\n      // TODO: extract start end end in a meaningful manner from the API\n      // this is not something that id based pagination APIs support generally\n      let label: string = `Total Results: ${pagination?.total}`;\n      if (pagination?.type === 'infinite-scroll') {\n        label = `Showing ${pagination?.total} items`;\n      }\n\n      if (customLabels?.pagination?.itemsCount) {\n        label = customLabels?.pagination?.itemsCount\n                .replace(':totalCount', pagination?.total as any);\n      }\n\n      return (\n        <p className=\"center pagination-state\">\n          {label}\n        </p>\n      );\n    }\n  }\n\n  function renderPageContent() {\n    const fields = getAllConfig?.fields || getAllConfig?.display?.fields || [];\n    const fieldsToFilter = fields.filter((field) => (field.filterable)).map((field) => field.name);\n\n    return (\n      <React.Fragment>\n        <QueryParams\n          initialParams={queryParams}\n          paginationConfig={paginationConfig}\n          submitCallback={submitQueryParams}\n        />\n        {\n          fieldsToFilter.length > 0 &&\n          <FilterField onChange={setFilter} />\n        }\n        {\n          pagination?.total &&\n          renderPaginationStateLabel()\n        }\n        {\n          error ?\n          <div className=\"app-error\">{error}</div> :\n          renderItemsUI()\n        }\n      </React.Fragment>\n    )\n  }\n\n  useEffect(() => {\n    const nextActivePage: IConfigPage | null = context?.config?.pages?.filter((p, pIdx) => p.id === page || (pIdx + 1) === parseInt(page || ''))[0] || null;\n    context.setActivePage(nextActivePage);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [page]);\n\n  useEffect(() => {\n    const { initQueryParams, initialPagination } = buildInitQueryParamsAndPaginationState(getAllConfig?.queryParams || [], paginationConfig);\n\n    setItems([]);\n    setQueryParams(extractQueryParams(initQueryParams));\n    setPagination(initialPagination);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [activePage]);\n\n  useEffect(() => {\n    // Load data when query params \n    getAllRequest();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [queryParams]);\n\n  return (\n    <div className=\"app-page\">\n      <header className=\"app-page-header\">\n        <hgroup>\n          <h2>{activePage?.name}</h2>\n          {\n            activePage?.description &&\n            <h4>{activePage?.description}</h4>\n          }\n        </hgroup>\n        {\n          postConfig &&\n          <Button className=\"add-item\" color=\"green\" onClick={() => setOpenedPopup({ type: 'add', title: addItemFormTitle, config: postConfig, submitCallback: addItem })}>{addItemLabel}</Button>\n        }\n      </header>\n      <main className=\"app-page-content\">\n        {renderPageContent()}\n      </main>\n      {\n        openedPopup &&\n        <FormPopup\n          title={openedPopup.title}\n          closeCallback={closeFormPopup}\n          submitCallback={openedPopup.submitCallback}\n          fields={openedPopup.config?.fields || []}\n          rawData={openedPopup.rawData}\n          getSingleConfig={openedPopup.getSingleConfig}\n          methodConfig={openedPopup.config}\n        />\n      }\n    </div>\n  );\n}\n\nexport const Page = withAppContext(PageComp);\n"]},"metadata":{},"sourceType":"module"}