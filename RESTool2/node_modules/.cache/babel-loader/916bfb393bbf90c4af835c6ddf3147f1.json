{"ast":null,"code":"import _objectSpread from \"/Users/claire/Desktop/covid-trend/RESTool/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/Users/claire/Desktop/covid-trend/RESTool/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/claire/Desktop/covid-trend/RESTool/src/components/formPopup/formPopup.comp.tsx\";\nimport React, { useState, useEffect } from 'react';\nimport { toast } from 'react-toastify';\nimport { Popup } from '../popup/popup.comp';\nimport { FormRow } from '../formRow/formRow.comp';\nimport { Button } from '../button/button.comp';\nimport { Loader } from '../loader/loader.comp';\nimport { dataHelpers } from '../../helpers/data.helpers';\nimport { fileHelpers } from '../../helpers/file.helpers';\nimport { withAppContext } from '../withContext/withContext.comp';\nimport './formPopup.scss';\n\nconst flatten = require('flat');\n\nconst unflatten = require('flat').unflatten;\n\nexport const FormPopup = withAppContext(({\n  context,\n  title,\n  fields,\n  rawData,\n  getSingleConfig,\n  methodConfig,\n  submitCallback,\n  closeCallback\n}) => {\n  const fieldsCopy = JSON.parse(JSON.stringify(fields));\n  const httpService = context.httpService,\n        activePage = context.activePage,\n        config = context.config;\n\n  const _useState = useState(true),\n        _useState2 = _slicedToArray(_useState, 2),\n        loading = _useState2[0],\n        setLoading = _useState2[1];\n\n  const _useState3 = useState([]),\n        _useState4 = _slicedToArray(_useState3, 2),\n        formFields = _useState4[0],\n        setFormFields = _useState4[1];\n\n  const _useState5 = useState(null),\n        _useState6 = _slicedToArray(_useState5, 2),\n        finalRawData = _useState6[0],\n        setFinalRawData = _useState6[1];\n\n  const pageHeaders = (activePage === null || activePage === void 0 ? void 0 : activePage.requestHeaders) || {};\n\n  const customLabels = _objectSpread({}, config === null || config === void 0 ? void 0 : config.customLabels, {}, activePage === null || activePage === void 0 ? void 0 : activePage.customLabels);\n\n  async function initFormFields() {\n    let finalRawData = rawData || {};\n\n    if (getSingleConfig && getSingleConfig.url) {\n      try {\n        const url = getSingleConfig.url,\n              requestHeaders = getSingleConfig.requestHeaders,\n              actualMethod = getSingleConfig.actualMethod,\n              dataPath = getSingleConfig.dataPath,\n              queryParams = getSingleConfig.queryParams;\n        const result = await httpService.fetch({\n          method: actualMethod || 'get',\n          origUrl: url,\n          queryParams,\n          headers: Object.assign({}, pageHeaders, requestHeaders || {}),\n          rawData\n        });\n        const extractedData = dataHelpers.extractDataByDataPath(result, dataPath);\n\n        if (extractedData && typeof extractedData === 'object') {\n          finalRawData = extractedData;\n        }\n      } catch (e) {\n        console.error('Could not load single item\\'s data.', e);\n        toast.error('Could not load single item\\'s data.');\n      }\n    }\n\n    setFinalRawData(finalRawData); // Store the raw data for later.\n\n    const flattenData = flatten(finalRawData || {});\n    setFormFields(fieldsCopy.map(field => {\n      let key = field.name;\n      field.originalName = field.name;\n\n      if (field.dataPath) {\n        key = `${field.dataPath}.${field.name}`;\n      } // Changing field name to include datapath\n      // This will use us later for unflatten the final object\n\n\n      field.name = key;\n\n      if (dataHelpers.checkIfFieldIsObject(field)) {\n        if (finalRawData[key] || field.value) {\n          field.value = JSON.stringify(finalRawData[key] || field.value, null, '  ') || '';\n        }\n\n        return field;\n      }\n\n      if (field.type === 'array') {\n        field.value = finalRawData[key] || field.value || [];\n        return field;\n      }\n\n      if (typeof flattenData[key] !== 'undefined') {\n        field.value = flattenData[key];\n      } else {\n        // important in order to prevent controlled / uncontrolled components error\n        field.value = typeof field.value === 'undefined' ? '' : field.value;\n      }\n\n      return field;\n    }));\n    setLoading(false);\n  }\n\n  async function submitForm(e) {\n    e.preventDefault();\n    const finalObject = methodConfig.includeOriginalFields ? Object.assign({}, finalRawData) : {};\n    const formData = new FormData();\n    const containFiles = fileHelpers.isMultipartForm(formFields);\n    let validationError = null;\n    formFields.forEach(field => {\n      if (field.type === 'file') {\n        const fileInput = document.querySelector(`input[name=\"${field.name || 'file'}\"]`);\n\n        if (fileInput.files.length > 0) {\n          const firstFile = fileInput.files[0];\n          formData.append(field.name || 'file', firstFile, firstFile.name);\n        }\n\n        return;\n      }\n\n      finalObject[field.name] = field.value;\n\n      if (containFiles) {\n        formData.append(field.name, field.value);\n      }\n\n      if (field.required && field.type !== 'boolean' && !field.value) {\n        validationError = 'Please fill up all required fields.';\n      }\n\n      if (dataHelpers.checkIfFieldIsObject(field) && field.value) {\n        try {\n          finalObject[field.name] = JSON.parse(field.value);\n        } catch (e) {\n          validationError = `Invalid JSON for field \"${field.name}\".`;\n        }\n      }\n\n      if (field.type === 'boolean') {\n        finalObject[field.name] = field.value || false;\n      }\n\n      if (field.type === 'encode') {\n        finalObject[field.name] = encodeURIComponent(field.value);\n      }\n    });\n\n    if (validationError) {\n      toast.error(validationError);\n      return;\n    }\n\n    setLoading(true);\n\n    try {\n      const body = containFiles ? formData : unflatten(finalObject);\n      await submitCallback(body, containFiles);\n      toast.success('Great Success!');\n      closeCallback(true);\n    } catch (e) {\n      toast.error(e.message);\n    }\n\n    setLoading(false);\n  }\n\n  function formChanged(fieldName, value) {\n    let updatedFormFields = JSON.parse(JSON.stringify(formFields));\n    updatedFormFields = updatedFormFields.map(field => {\n      if (field.name === fieldName) {\n        field.value = value;\n      }\n\n      return field;\n    });\n    setFormFields(updatedFormFields);\n  }\n\n  useEffect(() => {\n    initFormFields(); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  return React.createElement(Popup, {\n    show: true,\n    className: \"form-popup\",\n    closeCallback: () => closeCallback(false),\n    customLabels: customLabels,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199\n    },\n    __self: this\n  }, React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206\n    },\n    __self: this\n  }, title), React.createElement(\"section\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207\n    },\n    __self: this\n  }, loading ? React.createElement(Loader, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210\n    },\n    __self: this\n  }) : React.createElement(\"form\", {\n    onSubmit: submitForm,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211\n    },\n    __self: this\n  }, formFields.map((field, idx) => {\n    return React.createElement(FormRow, {\n      key: `field_${idx}`,\n      field: field,\n      onChange: formChanged,\n      showReset: !field.type || field.type === 'text',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215\n      },\n      __self: this\n    });\n  }), React.createElement(\"div\", {\n    className: \"buttons-wrapper center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224\n    },\n    __self: this\n  }, React.createElement(Button, {\n    type: \"submit\",\n    onClick: submitForm,\n    color: \"green\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 225\n    },\n    __self: this\n  }, \"Submit\"))))));\n});","map":{"version":3,"sources":["/Users/claire/Desktop/covid-trend/RESTool/src/components/formPopup/formPopup.comp.tsx"],"names":["React","useState","useEffect","toast","Popup","FormRow","Button","Loader","dataHelpers","fileHelpers","withAppContext","flatten","require","unflatten","FormPopup","context","title","fields","rawData","getSingleConfig","methodConfig","submitCallback","closeCallback","fieldsCopy","JSON","parse","stringify","httpService","activePage","config","loading","setLoading","formFields","setFormFields","finalRawData","setFinalRawData","pageHeaders","requestHeaders","customLabels","initFormFields","url","actualMethod","dataPath","queryParams","result","fetch","method","origUrl","headers","Object","assign","extractedData","extractDataByDataPath","e","console","error","flattenData","map","field","key","name","originalName","checkIfFieldIsObject","value","type","submitForm","preventDefault","finalObject","includeOriginalFields","formData","FormData","containFiles","isMultipartForm","validationError","forEach","fileInput","document","querySelector","files","length","firstFile","append","required","encodeURIComponent","body","success","message","formChanged","fieldName","updatedFormFields","idx"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { toast } from 'react-toastify';\n\nimport { Popup } from '../popup/popup.comp';\nimport {\n  IConfigInputField,\n  IConfigGetSingleMethod,\n  IConfigPostMethod,\n  IConfigPutMethod,\n  ICustomLabels\n} from '../../common/models/config.model';\nimport { FormRow } from '../formRow/formRow.comp';\nimport { Button } from '../button/button.comp';\nimport { Loader } from '../loader/loader.comp';\nimport { dataHelpers } from '../../helpers/data.helpers';\nimport { fileHelpers } from '../../helpers/file.helpers';\nimport { IAppContext } from '../app.context';\nimport { withAppContext } from '../withContext/withContext.comp';\n\nimport './formPopup.scss';\n\nconst flatten = require('flat');\nconst unflatten = require('flat').unflatten;\n\ninterface IProps {\n  context: IAppContext\n  title: string\n  fields: IConfigInputField[]\n  rawData?: any\n  getSingleConfig?: IConfigGetSingleMethod\n  methodConfig: IConfigPostMethod | IConfigPutMethod\n  closeCallback: (reloadData: boolean) => void\n  submitCallback: (body: any, containFiles: boolean) => void\n}\n\nexport const FormPopup = withAppContext(({ context, title, fields, rawData, getSingleConfig, methodConfig, submitCallback, closeCallback }: IProps) => {\n  const fieldsCopy: IConfigInputField[] = JSON.parse(JSON.stringify(fields));\n  const { httpService, activePage, config } = context;\n  const [loading, setLoading] = useState<boolean>(true);\n  const [formFields, setFormFields] = useState<IConfigInputField[]>([]);\n  const [finalRawData, setFinalRawData] = useState<any>(null);\n  const pageHeaders: any = activePage?.requestHeaders || {};\n  const customLabels: ICustomLabels | undefined = { ...config?.customLabels, ...activePage?.customLabels };\n\n  async function initFormFields() {\n    let finalRawData: any = rawData || {};\n\n    if (getSingleConfig && getSingleConfig.url) {\n      try {\n        const { url, requestHeaders, actualMethod, dataPath, queryParams } = getSingleConfig;\n        const result = await httpService.fetch({\n          method: actualMethod || 'get',\n          origUrl: url,\n          queryParams,\n          headers: Object.assign({}, pageHeaders,  requestHeaders || {}),\n          rawData,\n        });\n\n        const extractedData = dataHelpers.extractDataByDataPath(result, dataPath);\n\n        if (extractedData && typeof extractedData === 'object') {\n          finalRawData = extractedData;\n        }\n      } catch (e) {\n        console.error('Could not load single item\\'s data.', e);\n        toast.error('Could not load single item\\'s data.');\n      }\n    }\n\n    setFinalRawData(finalRawData); // Store the raw data for later.\n\n    const flattenData = flatten(finalRawData || {});\n\n    setFormFields(fieldsCopy.map((field) => {\n      let key = field.name;\n\n      field.originalName = field.name;\n\n      if (field.dataPath) {\n        key = `${field.dataPath}.${field.name}`;\n      }\n\n      // Changing field name to include datapath\n      // This will use us later for unflatten the final object\n      field.name = key;\n\n      if (dataHelpers.checkIfFieldIsObject(field)) {\n        if (finalRawData[key] || field.value) {\n          field.value = JSON.stringify(finalRawData[key] || field.value, null, '  ') || '';\n        }\n        return field;\n      }\n\n      if (field.type === 'array') {\n        field.value = finalRawData[key] || field.value || [];\n        return field;\n      }\n\n      if (typeof flattenData[key] !== 'undefined') {\n        field.value = flattenData[key];\n      } else {\n        // important in order to prevent controlled / uncontrolled components error\n        field.value = typeof field.value === 'undefined' ? '' : field.value;\n      }\n\n      return field;\n    }));\n\n    setLoading(false);\n  }\n\n  async function submitForm(e: any) {\n    e.preventDefault();\n\n    const finalObject: any = (methodConfig as IConfigPutMethod).includeOriginalFields ? Object.assign({}, finalRawData) : {};\n    const formData = new FormData();\n    const containFiles: boolean = fileHelpers.isMultipartForm(formFields);\n    let validationError = null;\n\n    formFields.forEach((field) => {\n      if (field.type === 'file') {\n        const fileInput: any = document.querySelector(`input[name=\"${field.name || 'file'}\"]`) as HTMLInputElement;\n\n        if (fileInput.files.length > 0) {\n          const firstFile = fileInput.files[0];\n          formData.append(field.name || 'file', firstFile, firstFile.name);\n        }\n        return;\n      }\n\n      finalObject[field.name] = field.value;\n\n      if (containFiles) {\n        formData.append(field.name, field.value);\n      }\n\n      if (field.required && field.type !== 'boolean' && !field.value) {\n        validationError = 'Please fill up all required fields.';\n      }\n\n      if (dataHelpers.checkIfFieldIsObject(field) && field.value) {\n        try {\n          finalObject[field.name] = JSON.parse(field.value);\n        } catch (e) {\n          validationError = `Invalid JSON for field \"${field.name}\".`;\n        }\n      }\n\n      if (field.type === 'boolean') {\n        finalObject[field.name] = field.value || false;\n      }\n\n      if (field.type === 'encode') {\n        finalObject[field.name] = encodeURIComponent(field.value);\n      }\n    });\n\n    if (validationError) {\n      toast.error(validationError);\n      return;\n    }\n\n    setLoading(true);\n\n    try {\n      const body = containFiles ? formData : unflatten(finalObject);\n      await submitCallback(body, containFiles);\n\n      toast.success('Great Success!');\n\n      closeCallback(true);\n    } catch (e) {\n      toast.error(e.message);\n    }\n\n    setLoading(false);\n  }\n\n  function formChanged(fieldName: string, value: any) {\n    let updatedFormFields: IConfigInputField[] = JSON.parse(JSON.stringify(formFields));\n\n    updatedFormFields = updatedFormFields.map((field: IConfigInputField) => {\n      if (field.name === fieldName) {\n        field.value = value;\n      }\n\n      return field;\n    });\n\n    setFormFields(updatedFormFields);\n  }\n\n  useEffect(() => {\n    initFormFields();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <Popup\n      show={true}\n      className=\"form-popup\"\n      closeCallback={() => closeCallback(false)}\n      customLabels={customLabels}\n    >\n      <React.Fragment>\n        <h2>{title}</h2>\n        <section>\n          {\n            loading ?\n            <Loader /> :\n            <form onSubmit={submitForm}>\n              {\n                formFields.map((field, idx) => {\n                  return (\n                    <FormRow\n                      key={`field_${idx}`}\n                      field={field}\n                      onChange={formChanged}\n                      showReset={!field.type || field.type === 'text'}\n                    />\n                  );\n                })\n              }\n              <div className=\"buttons-wrapper center\">\n                <Button type=\"submit\" onClick={submitForm} color=\"green\">Submit</Button>\n              </div>\n            </form>\n          }\n        </section>\n      </React.Fragment>\n    </Popup>\n  );\n});\n"]},"metadata":{},"sourceType":"module"}