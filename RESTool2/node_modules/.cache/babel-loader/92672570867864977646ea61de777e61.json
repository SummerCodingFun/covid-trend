{"ast":null,"code":"import HTTPService from './http.service';\nimport Ajv from 'ajv';\nconst httpService = new HTTPService();\n\nclass ConfigService extends HTTPService {\n  async getRemoteConfig(url) {\n    if (url.endsWith('.js')) {\n      return (await import(\n      /* webpackIgnore: true */\n      url)).default;\n    }\n\n    return await httpService.fetch({\n      origUrl: url\n    });\n  }\n\n  async loadDefaultConfig() {\n    try {\n      return await this.getRemoteConfig('/config.json');\n    } catch (e) {\n      return await this.getRemoteConfig('/config.js');\n    }\n  }\n\n  validateConfig(config) {\n    if (config === null) {\n      return {\n        isValid: true,\n        errorMessage: null\n      };\n    }\n\n    const configSchema = require('../assets/schemas/config.schema.json');\n\n    const ajv = new Ajv({\n      allErrors: true,\n      verbose: true\n    });\n    const validate = ajv.compile(configSchema);\n    const isValid = validate(config);\n\n    if (typeof isValid !== 'boolean') {\n      throw new Error('Unexpected asynchronous JSON validation');\n    }\n\n    if (isValid) {\n      return {\n        isValid,\n        errorMessage: null\n      };\n    }\n\n    const firstError = validate.errors ? validate.errors[0] : undefined;\n    let errorMessage = null;\n\n    if ((firstError === null || firstError === void 0 ? void 0 : firstError.message) && (firstError === null || firstError === void 0 ? void 0 : firstError.dataPath)) {\n      errorMessage = `Error parsing configuration at \"${firstError.dataPath}\": ${firstError.message}`;\n    } else if (firstError === null || firstError === void 0 ? void 0 : firstError.message) {\n      errorMessage = `Error parsing configuration: ${firstError.message}`;\n    } else if (firstError === null || firstError === void 0 ? void 0 : firstError.dataPath) {\n      errorMessage = `Error parsing configuration at \"${firstError.dataPath}\"`;\n    } else {\n      errorMessage = `Error parsing configuration`;\n    }\n\n    console.error(errorMessage);\n    console.error('All configuration errors: ', validate.errors);\n    return {\n      isValid,\n      errorMessage\n    };\n  }\n\n}\n\nexport default new ConfigService();","map":{"version":3,"sources":["/Users/claire/Desktop/covid-trend/RESTool2/src/services/config.service.ts"],"names":["HTTPService","Ajv","httpService","ConfigService","getRemoteConfig","url","endsWith","default","fetch","origUrl","loadDefaultConfig","e","validateConfig","config","isValid","errorMessage","configSchema","require","ajv","allErrors","verbose","validate","compile","Error","firstError","errors","undefined","message","dataPath","console","error"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,gBAAxB;AAEA,OAAOC,GAAP,MAAgB,KAAhB;AAEA,MAAMC,WAAwB,GAAG,IAAIF,WAAJ,EAAjC;;AAEA,MAAMG,aAAN,SAA4BH,WAA5B,CAAwC;AAEtC,QAAaI,eAAb,CAA6BC,GAA7B,EAA0C;AACxC,QAAIA,GAAG,CAACC,QAAJ,CAAa,KAAb,CAAJ,EAAyB;AACvB,aAAO,CAAC,MAAM;AAAO;AAAyBD,MAAAA,GAAhC,CAAP,EAA6CE,OAApD;AACD;;AACD,WAAO,MAAML,WAAW,CAACM,KAAZ,CAAkB;AAC7BC,MAAAA,OAAO,EAAEJ;AADoB,KAAlB,CAAb;AAGD;;AAED,QAAaK,iBAAb,GAAiC;AAC/B,QAAI;AACF,aAAO,MAAM,KAAKN,eAAL,CAAqB,cAArB,CAAb;AACD,KAFD,CAEE,OAAOO,CAAP,EAAU;AACV,aAAQ,MAAM,KAAKP,eAAL,CAAqB,YAArB,CAAd;AACD;AACF;;AAEMQ,EAAAA,cAAP,CAAsBC,MAAtB,EAAiG;AAC/F,QAAIA,MAAM,KAAK,IAAf,EAAqB;AACnB,aAAO;AACLC,QAAAA,OAAO,EAAE,IADJ;AAELC,QAAAA,YAAY,EAAE;AAFT,OAAP;AAID;;AACD,UAAMC,YAAY,GAAGC,OAAO,CAAC,sCAAD,CAA5B;;AACA,UAAMC,GAAG,GAAG,IAAIjB,GAAJ,CAAQ;AAClBkB,MAAAA,SAAS,EAAE,IADO;AAElBC,MAAAA,OAAO,EAAE;AAFS,KAAR,CAAZ;AAIA,UAAMC,QAAQ,GAAGH,GAAG,CAACI,OAAJ,CAAYN,YAAZ,CAAjB;AACA,UAAMF,OAAO,GAAGO,QAAQ,CAACR,MAAD,CAAxB;;AACA,QAAI,OAAOC,OAAP,KAAmB,SAAvB,EAAkC;AAChC,YAAM,IAAIS,KAAJ,CAAU,yCAAV,CAAN;AACD;;AACD,QAAIT,OAAJ,EAAa;AACX,aAAO;AACLA,QAAAA,OADK;AAELC,QAAAA,YAAY,EAAE;AAFT,OAAP;AAID;;AACD,UAAMS,UAAU,GAAGH,QAAQ,CAACI,MAAT,GAAkBJ,QAAQ,CAACI,MAAT,CAAgB,CAAhB,CAAlB,GAAuCC,SAA1D;AACA,QAAIX,YAA2B,GAAG,IAAlC;;AACA,QAAI,CAAAS,UAAU,SAAV,IAAAA,UAAU,WAAV,YAAAA,UAAU,CAAEG,OAAZ,MAAuBH,UAAvB,aAAuBA,UAAvB,uBAAuBA,UAAU,CAAEI,QAAnC,CAAJ,EAAiD;AAC/Cb,MAAAA,YAAY,GAAI,mCAAkCS,UAAU,CAACI,QAAS,MAAKJ,UAAU,CAACG,OAAQ,EAA9F;AACD,KAFD,MAEO,IAAIH,UAAJ,aAAIA,UAAJ,uBAAIA,UAAU,CAAEG,OAAhB,EAAyB;AAC9BZ,MAAAA,YAAY,GAAI,gCAA+BS,UAAU,CAACG,OAAQ,EAAlE;AACD,KAFM,MAEA,IAAIH,UAAJ,aAAIA,UAAJ,uBAAIA,UAAU,CAAEI,QAAhB,EAA0B;AAC/Bb,MAAAA,YAAY,GAAI,mCAAkCS,UAAU,CAACI,QAAS,GAAtE;AACD,KAFM,MAEA;AACLb,MAAAA,YAAY,GAAI,6BAAhB;AACD;;AACDc,IAAAA,OAAO,CAACC,KAAR,CAAcf,YAAd;AACAc,IAAAA,OAAO,CAACC,KAAR,CAAc,4BAAd,EAA4CT,QAAQ,CAACI,MAArD;AACA,WAAO;AACLX,MAAAA,OADK;AAELC,MAAAA;AAFK,KAAP;AAID;;AA3DqC;;AA+DxC,eAAe,IAAIZ,aAAJ,EAAf","sourcesContent":["import HTTPService from './http.service';\nimport { IConfig } from '../common/models/config.model';\nimport Ajv from 'ajv';\n\nconst httpService: HTTPService = new HTTPService();\n\nclass ConfigService extends HTTPService {\n\n  public async getRemoteConfig(url: string) {\n    if (url.endsWith('.js')) {\n      return (await import(/* webpackIgnore: true */url)).default;\n    }\n    return await httpService.fetch({\n      origUrl: url,\n    });\n  }\n\n  public async loadDefaultConfig() {\n    try {\n      return await this.getRemoteConfig('/config.json');\n    } catch (e) {\n      return (await this.getRemoteConfig('/config.js'));\n    }\n  }\n\n  public validateConfig(config: IConfig | null): { isValid: boolean, errorMessage: string | null } {\n    if (config === null) {\n      return {\n        isValid: true,\n        errorMessage: null,\n      }\n    }\n    const configSchema = require('../assets/schemas/config.schema.json');\n    const ajv = new Ajv({\n      allErrors: true,\n      verbose: true,\n    });\n    const validate = ajv.compile(configSchema);\n    const isValid = validate(config);\n    if (typeof isValid !== 'boolean') {\n      throw new Error('Unexpected asynchronous JSON validation');\n    }\n    if (isValid) {\n      return {\n        isValid,\n        errorMessage: null,\n      }\n    }\n    const firstError = validate.errors ? validate.errors[0] : undefined;\n    let errorMessage: string | null = null;\n    if (firstError?.message && firstError?.dataPath) {\n      errorMessage = `Error parsing configuration at \"${firstError.dataPath}\": ${firstError.message}`\n    } else if (firstError?.message) {\n      errorMessage = `Error parsing configuration: ${firstError.message}`\n    } else if (firstError?.dataPath) {\n      errorMessage = `Error parsing configuration at \"${firstError.dataPath}\"`\n    } else {\n      errorMessage = `Error parsing configuration`;\n    }\n    console.error(errorMessage);\n    console.error('All configuration errors: ', validate.errors);\n    return {\n      isValid,\n      errorMessage,\n    };\n  }\n\n}\n\nexport default new ConfigService();\n"]},"metadata":{},"sourceType":"module"}