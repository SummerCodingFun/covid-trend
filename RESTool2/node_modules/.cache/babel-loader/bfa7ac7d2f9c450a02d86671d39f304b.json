{"ast":null,"code":"import _objectSpread from \"/Users/claire/Desktop/covid-trend/RESTool-113487f63b750b2e4555b0d53ca076377e9eeff0/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/Users/claire/Desktop/covid-trend/RESTool-113487f63b750b2e4555b0d53ca076377e9eeff0/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/claire/Desktop/covid-trend/RESTool-113487f63b750b2e4555b0d53ca076377e9eeff0/src/components/formRow/formRow.comp.tsx\";\nimport React, { useState } from 'react';\nimport { orderBy } from 'natural-orderby';\nimport { toast } from 'react-toastify';\nimport { Button } from '../button/button.comp';\nimport { withAppContext } from '../withContext/withContext.comp';\nimport { dataHelpers } from '../../helpers/data.helpers';\nimport './formRow.scss';\nexport const FormRow = withAppContext(({\n  context,\n  field,\n  direction,\n  showReset,\n  onChange\n}) => {\n  var _customLabels$buttons, _customLabels$buttons2;\n\n  const _useState = useState({}),\n        _useState2 = _slicedToArray(_useState, 2),\n        optionSources = _useState2[0],\n        setOptionSources = _useState2[1];\n\n  const httpService = context.httpService,\n        activePage = context.activePage,\n        config = context.config;\n  const pageHeaders = (activePage === null || activePage === void 0 ? void 0 : activePage.requestHeaders) || {};\n\n  const customLabels = _objectSpread({}, config === null || config === void 0 ? void 0 : config.customLabels, {}, activePage === null || activePage === void 0 ? void 0 : activePage.customLabels);\n\n  const addArrayItemLabel = (customLabels === null || customLabels === void 0 ? void 0 : (_customLabels$buttons = customLabels.buttons) === null || _customLabels$buttons === void 0 ? void 0 : _customLabels$buttons.addArrayItem) || 'Add Item';\n  const clearLabel = (customLabels === null || customLabels === void 0 ? void 0 : (_customLabels$buttons2 = customLabels.buttons) === null || _customLabels$buttons2 === void 0 ? void 0 : _customLabels$buttons2.clearInput) || 'Clear';\n\n  async function loadOptionSourceFromRemote(fieldName, optionSource) {\n    try {\n      const url = optionSource.url,\n            dataPath = optionSource.dataPath,\n            actualMethod = optionSource.actualMethod,\n            requestHeaders = optionSource.requestHeaders;\n\n      if (!url) {\n        throw new Error(`URL option source (for field \"${fieldName}\") is empty.`);\n      }\n\n      const result = await httpService.fetch({\n        method: actualMethod || 'get',\n        origUrl: url,\n        queryParams: [],\n        headers: Object.assign({}, pageHeaders, requestHeaders || {})\n      });\n      const extractedData = dataHelpers.extractDataByDataPath(result, dataPath);\n\n      if (!extractedData || !extractedData.length) {\n        throw new Error(`Option source data is empty (for field \"${fieldName}\")`);\n      } // Map option source to fields\n\n\n      const optionSourceData = extractedData.map((option, idx) => {\n        const valuePath = optionSource.valuePath,\n              displayPath = optionSource.displayPath;\n\n        if (typeof option === 'string') {\n          return option;\n        }\n\n        return {\n          display: displayPath && option[displayPath] ? option[displayPath] : `Option ${idx + 1}`,\n          value: valuePath && option[valuePath] ? option[valuePath] : `${idx}`\n        };\n      });\n      setOptionSources(_objectSpread({}, optionSources, {\n        [fieldName]: optionSourceData\n      }));\n    } catch (e) {\n      toast.error(e.message);\n    }\n  }\n\n  function addItemToFieldArray(e, originalField) {\n    e.preventDefault();\n    onChange(field.name, [...(originalField.value || []), '']);\n  }\n\n  function removeItemToFieldArray(originalField, idx) {\n    const updatedArray = [...(originalField.value || [])];\n    updatedArray.splice(idx, 1);\n    onChange(field.name, updatedArray);\n  }\n\n  function renderArrayItems(originalField) {\n    const array = originalField.value || [];\n    return React.createElement(\"div\", {\n      className: \"array-form\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, array.map((item, itemIdx) => {\n      const inputField = renderFieldInput({\n        value: item,\n        name: `${originalField.name}.${itemIdx}`\n      }, (fieldName, value) => {\n        const updatedArray = (originalField.value || []).map((localValue, idx) => {\n          if (idx === itemIdx) {\n            return value;\n          }\n\n          return localValue;\n        });\n        onChange(originalField.name, updatedArray);\n      });\n      return React.createElement(\"div\", {\n        className: \"array-form-item\",\n        key: `array_form_${itemIdx}`,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }, inputField, React.createElement(\"i\", {\n        title: clearLabel,\n        onClick: () => removeItemToFieldArray(originalField, itemIdx),\n        \"aria-label\": \"Remove\",\n        className: \"clear-input fa fa-times\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }));\n    }), React.createElement(Button, {\n      className: \"add-array-item\",\n      onClick: e => addItemToFieldArray(e, originalField),\n      title: addArrayItemLabel,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      className: \"fa fa-plus\",\n      \"aria-hidden\": \"true\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    })));\n  }\n\n  function renderFieldInput(field, changeCallback) {\n    var _customLabels$placeho, _customLabels$placeho3, _customLabels$placeho4, _customLabels$placeho5, _customLabels$placeho6, _customLabels$placeho7, _customLabels$placeho8, _customLabels$placeho9, _customLabels$placeho10;\n\n    const inputProps = (defaultPlaceholder = '') => {\n      return {\n        value: field.value,\n        placeholder: field.placeholder || defaultPlaceholder,\n        disabled: field.readonly,\n        required: field.required,\n        onChange: e => changeCallback(field.name, e.target.value)\n      };\n    };\n\n    switch (field.type) {\n      case 'boolean':\n        return React.createElement(\"input\", Object.assign({\n          type: \"checkbox\"\n        }, inputProps(), {\n          checked: field.value,\n          onChange: e => changeCallback(field.name, e.target.checked, true),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 141\n          },\n          __self: this\n        }));\n\n      case 'select':\n        {\n          var _field$optionSource;\n\n          const optionSource = field.optionSource;\n\n          if (optionSource && !optionSources[field.name]) {\n            loadOptionSourceFromRemote(field.name, optionSource);\n            return React.createElement(\"select\", Object.assign({}, inputProps(), {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 148\n              },\n              __self: this\n            }), React.createElement(\"option\", {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 148\n              },\n              __self: this\n            }, \"-- Loading Options... --\"));\n          }\n\n          const sortBy = (_field$optionSource = field.optionSource) === null || _field$optionSource === void 0 ? void 0 : _field$optionSource.sortBy;\n          const finalOptions = optionSources[field.name] || field.options || [];\n          const sortedOptions = orderBy(finalOptions, typeof sortBy === 'string' ? [sortBy] : sortBy || []);\n          return React.createElement(\"select\", Object.assign({}, inputProps(), {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 156\n            },\n            __self: this\n          }), React.createElement(\"option\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 157\n            },\n            __self: this\n          }, \"-- Select --\"), sortedOptions.map((option, idx) => {\n            const key = `option_${idx}_`;\n\n            if (typeof option !== 'object') {\n              return React.createElement(\"option\", {\n                key: `${key}_${option}`,\n                value: option,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 162\n                },\n                __self: this\n              }, option);\n            }\n\n            return React.createElement(\"option\", {\n              key: `${key}_${option.value}`,\n              value: option.value,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 164\n              },\n              __self: this\n            }, option.display || option.value);\n          }));\n        }\n        ;\n\n      case 'object':\n        return React.createElement(\"textarea\", Object.assign({}, inputProps((customLabels === null || customLabels === void 0 ? void 0 : (_customLabels$placeho = customLabels.placeholders) === null || _customLabels$placeho === void 0 ? void 0 : _customLabels$placeho.object) || 'Enter JSON...'), {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 171\n          },\n          __self: this\n        }));\n\n      case 'array':\n        {\n          const arrayType = field.arrayType,\n                value = field.value;\n\n          if (!value || !arrayType || arrayType === 'object') {\n            var _customLabels$placeho2;\n\n            return React.createElement(\"textarea\", Object.assign({}, inputProps((customLabels === null || customLabels === void 0 ? void 0 : (_customLabels$placeho2 = customLabels.placeholders) === null || _customLabels$placeho2 === void 0 ? void 0 : _customLabels$placeho2.array) || 'Enter JSON array...'), {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 175\n              },\n              __self: this\n            }));\n          }\n\n          return renderArrayItems(field);\n        }\n\n      case 'long-text':\n        return React.createElement(\"textarea\", Object.assign({}, inputProps((customLabels === null || customLabels === void 0 ? void 0 : (_customLabels$placeho3 = customLabels.placeholders) === null || _customLabels$placeho3 === void 0 ? void 0 : _customLabels$placeho3.text) || 'Enter text...'), {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 180\n          },\n          __self: this\n        }));\n\n      case 'number':\n      case 'integer':\n        return React.createElement(\"input\", Object.assign({\n          type: \"number\"\n        }, inputProps((customLabels === null || customLabels === void 0 ? void 0 : (_customLabels$placeho4 = customLabels.placeholders) === null || _customLabels$placeho4 === void 0 ? void 0 : _customLabels$placeho4.number) || '0'), {\n          onChange: e => changeCallback(field.name, e.target.valueAsNumber),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 183\n          },\n          __self: this\n        }));\n\n      case 'color':\n        return React.createElement(\"input\", Object.assign({\n          type: \"color\"\n        }, inputProps((customLabels === null || customLabels === void 0 ? void 0 : (_customLabels$placeho5 = customLabels.placeholders) === null || _customLabels$placeho5 === void 0 ? void 0 : _customLabels$placeho5.color) || 'Enter color...'), {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 185\n          },\n          __self: this\n        }));\n\n      case 'email':\n        return React.createElement(\"input\", Object.assign({\n          type: \"email\"\n        }, inputProps((customLabels === null || customLabels === void 0 ? void 0 : (_customLabels$placeho6 = customLabels.placeholders) === null || _customLabels$placeho6 === void 0 ? void 0 : _customLabels$placeho6.email) || 'Enter email...'), {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 187\n          },\n          __self: this\n        }));\n\n      case 'password':\n        return React.createElement(\"input\", Object.assign({\n          type: \"password\"\n        }, inputProps((customLabels === null || customLabels === void 0 ? void 0 : (_customLabels$placeho7 = customLabels.placeholders) === null || _customLabels$placeho7 === void 0 ? void 0 : _customLabels$placeho7.password) || 'Enter password...'), {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 189\n          },\n          __self: this\n        }));\n\n      case 'hidden':\n        return React.createElement(\"input\", {\n          type: \"hidden\",\n          value: field.value,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 191\n          },\n          __self: this\n        });\n\n      case 'file':\n        return React.createElement(\"input\", {\n          type: \"file\",\n          accept: field.accept || '*',\n          placeholder: field.placeholder || (customLabels === null || customLabels === void 0 ? void 0 : (_customLabels$placeho8 = customLabels.placeholders) === null || _customLabels$placeho8 === void 0 ? void 0 : _customLabels$placeho8.file) || 'Select file...',\n          name: field.name || 'file',\n          disabled: field.readonly,\n          required: field.required,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 193\n          },\n          __self: this\n        });\n\n      case 'note':\n        return React.createElement(\"p\", {\n          className: \"note\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 195\n          },\n          __self: this\n        }, field.value);\n\n      case 'date':\n        return React.createElement(\"input\", Object.assign({\n          type: \"date\"\n        }, inputProps((customLabels === null || customLabels === void 0 ? void 0 : (_customLabels$placeho9 = customLabels.placeholders) === null || _customLabels$placeho9 === void 0 ? void 0 : _customLabels$placeho9.date) || 'Enter date...'), {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 197\n          },\n          __self: this\n        }));\n\n      case 'text':\n      default:\n        return React.createElement(\"input\", Object.assign({\n          type: \"text\"\n        }, inputProps((customLabels === null || customLabels === void 0 ? void 0 : (_customLabels$placeho10 = customLabels.placeholders) === null || _customLabels$placeho10 === void 0 ? void 0 : _customLabels$placeho10.text) || 'Enter text...'), {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 200\n          },\n          __self: this\n        }));\n    }\n  }\n\n  return React.createElement(\"div\", {\n    className: `form-row ${direction || 'row'}`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205\n    },\n    __self: this\n  }, field.type !== 'hidden' && React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208\n    },\n    __self: this\n  }, field.label || field.originalName, field.required ? ' *' : ''), renderFieldInput(field, onChange), showReset && !field.readonly && field.value && field.value.length > 0 && React.createElement(\"i\", {\n    title: clearLabel,\n    onClick: () => onChange(field.name, '', true),\n    \"aria-label\": \"Clear\",\n    className: \"clear-input fa fa-times\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213\n    },\n    __self: this\n  }));\n});","map":{"version":3,"sources":["/Users/claire/Desktop/covid-trend/RESTool-113487f63b750b2e4555b0d53ca076377e9eeff0/src/components/formRow/formRow.comp.tsx"],"names":["React","useState","orderBy","toast","Button","withAppContext","dataHelpers","FormRow","context","field","direction","showReset","onChange","optionSources","setOptionSources","httpService","activePage","config","pageHeaders","requestHeaders","customLabels","addArrayItemLabel","buttons","addArrayItem","clearLabel","clearInput","loadOptionSourceFromRemote","fieldName","optionSource","url","dataPath","actualMethod","Error","result","fetch","method","origUrl","queryParams","headers","Object","assign","extractedData","extractDataByDataPath","length","optionSourceData","map","option","idx","valuePath","displayPath","display","value","e","error","message","addItemToFieldArray","originalField","preventDefault","name","removeItemToFieldArray","updatedArray","splice","renderArrayItems","array","item","itemIdx","inputField","renderFieldInput","localValue","changeCallback","inputProps","defaultPlaceholder","placeholder","disabled","readonly","required","target","type","checked","sortBy","finalOptions","options","sortedOptions","key","placeholders","object","arrayType","text","number","valueAsNumber","color","email","password","accept","file","date","label","originalName"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { orderBy } from 'natural-orderby';\nimport { toast } from 'react-toastify';\n\nimport { IConfigInputField, IConfigOptionSource, ICustomLabels } from '../../common/models/config.model';\nimport { Button } from '../button/button.comp';\nimport { withAppContext } from '../withContext/withContext.comp';\nimport { IAppContext } from '../app.context';\nimport { dataHelpers } from '../../helpers/data.helpers';\n\nimport './formRow.scss';\n\ninterface IProps {\n  context: IAppContext\n  field: IConfigInputField\n  onChange: (fieldName: string, value: any, submitAfterChange?: boolean) => void\n  showReset?: boolean\n  direction?: 'row' | 'column'\n}\n\nexport const FormRow = withAppContext(({ context, field, direction, showReset, onChange }: IProps) => {\n  const [optionSources, setOptionSources] = useState<any>({});\n  const { httpService, activePage, config } = context;\n  const pageHeaders: any = activePage?.requestHeaders || {};\n  const customLabels: ICustomLabels | undefined = { ...config?.customLabels, ...activePage?.customLabels };\n  const addArrayItemLabel = customLabels?.buttons?.addArrayItem || 'Add Item';\n  const clearLabel = customLabels?.buttons?.clearInput || 'Clear';\n\n  async function loadOptionSourceFromRemote(fieldName: string, optionSource: IConfigOptionSource) {\n    try {\n      const { url, dataPath, actualMethod, requestHeaders } = optionSource;\n\n      if (!url) {\n        throw new Error(`URL option source (for field \"${fieldName}\") is empty.`);\n      }\n\n      const result = await httpService.fetch({\n        method: actualMethod || 'get',\n        origUrl: url,\n        queryParams: [],\n        headers: Object.assign({}, pageHeaders, requestHeaders || {}),\n      });\n\n      const extractedData = dataHelpers.extractDataByDataPath(result, dataPath);\n\n      if (!extractedData || !extractedData.length) {\n        throw new Error(`Option source data is empty (for field \"${fieldName}\")`);\n      }\n\n      // Map option source to fields\n      const optionSourceData = extractedData.map((option: any, idx: number) => {\n        const { valuePath, displayPath } = optionSource;\n\n        if (typeof option === 'string') {\n          return option;\n        }\n\n        return {\n          display: displayPath && option[displayPath] ? option[displayPath] : `Option ${idx + 1}`,\n          value: valuePath && option[valuePath] ? option[valuePath] : `${idx}`,\n        };\n      });\n\n      setOptionSources({\n        ...optionSources,\n        [fieldName]: optionSourceData\n      });\n    } catch (e) {\n      toast.error(e.message);\n    }\n  }\n\n  function addItemToFieldArray(e: any, originalField: IConfigInputField) {\n    e.preventDefault();\n\n    onChange(field.name, [\n      ...(originalField.value || []),\n      ''\n    ]);\n  }\n\n  function removeItemToFieldArray(originalField: IConfigInputField, idx: number) {\n    const updatedArray = [\n      ...(originalField.value || [])\n    ];\n\n    updatedArray.splice(idx, 1);\n\n    onChange(field.name, updatedArray);\n  }\n\n  function renderArrayItems(originalField: IConfigInputField) {\n    const array: any[] = originalField.value || [];\n\n    return (\n      <div className=\"array-form\">\n        {\n          array.map((item, itemIdx) => {\n            const inputField = renderFieldInput({\n              value: item,\n              name: `${originalField.name}.${itemIdx}`,\n            } as IConfigInputField, (fieldName, value) => {\n              const updatedArray = (originalField.value || []).map((localValue: any, idx: number) => {\n                if (idx === itemIdx) {\n                  return value;\n                }\n                return localValue;\n              });\n\n              onChange(originalField.name, updatedArray);\n            });\n\n            return (\n              <div className=\"array-form-item\" key={`array_form_${itemIdx}`}>\n                {inputField}\n                <i title={clearLabel} onClick={() => removeItemToFieldArray(originalField, itemIdx)} aria-label=\"Remove\" className=\"clear-input fa fa-times\"></i>\n              </div>\n            )\n          })\n        }\n        <Button className=\"add-array-item\" onClick={(e) => addItemToFieldArray(e, originalField)} title={addArrayItemLabel}>\n          <i className=\"fa fa-plus\" aria-hidden=\"true\"></i>\n        </Button>\n      </div>\n    );\n  }\n\n  function renderFieldInput(field: IConfigInputField, changeCallback: (fieldName: string, value: any, submitAfterChange?: boolean) => void) {\n    const inputProps = (defaultPlaceholder: string = '') => {\n      return {\n        value: field.value,\n        placeholder: field.placeholder || defaultPlaceholder,\n        disabled: field.readonly,\n        required: field.required,\n        onChange: (e: any) => changeCallback(field.name, e.target.value),\n      };\n    };\n\n    switch (field.type) {\n      case 'boolean':\n        return <input type=\"checkbox\" {...inputProps()} checked={field.value} onChange={(e) => changeCallback(field.name, e.target.checked, true)} />;\n      case 'select':\n        {\n          const { optionSource } = field;\n\n          if (optionSource && !optionSources[field.name]) {\n            loadOptionSourceFromRemote(field.name, optionSource);\n            return <select {...inputProps()}><option>-- Loading Options... --</option></select>\n          }\n\n          const sortBy = field.optionSource?.sortBy;\n          const finalOptions: { value: string, display: string }[] = optionSources[field.name] || field.options || [];\n          const sortedOptions = orderBy(finalOptions, typeof sortBy === 'string' ? [sortBy] : (sortBy || []));\n\n          return (\n            <select {...inputProps()}>\n              <option>-- Select --</option>\n              {\n                sortedOptions.map((option, idx) => {\n                  const key = `option_${idx}_`;\n                  if (typeof option !== 'object') {\n                    return <option key={`${key}_${option}`} value={option}>{option}</option>\n                  }\n                  return <option key={`${key}_${option.value}`} value={option.value}>{option.display || option.value}</option>\n                })\n              }\n            </select>\n          );\n        };\n      case 'object':\n        return <textarea {...inputProps(customLabels?.placeholders?.object || 'Enter JSON...')}></textarea>;\n      case 'array': {\n        const { arrayType, value } = field;\n        if (!value || !arrayType || arrayType === 'object') {\n          return <textarea {...inputProps(customLabels?.placeholders?.array || 'Enter JSON array...')}></textarea>;\n        }\n        return renderArrayItems(field);\n      }\n      case 'long-text':\n        return <textarea {...inputProps(customLabels?.placeholders?.text || 'Enter text...')}></textarea>;\n      case 'number':\n      case 'integer':\n        return <input type=\"number\" {...inputProps(customLabels?.placeholders?.number || '0')} onChange={(e) => changeCallback(field.name, e.target.valueAsNumber)} />;\n      case 'color':\n        return <input type=\"color\" {...inputProps(customLabels?.placeholders?.color || 'Enter color...')} />;\n      case 'email':\n        return <input type=\"email\" {...inputProps(customLabels?.placeholders?.email || 'Enter email...')} />;\n      case 'password':\n        return <input type=\"password\" {...inputProps(customLabels?.placeholders?.password || 'Enter password...')} />;\n      case 'hidden':\n        return <input type=\"hidden\" value={field.value} />;\n      case 'file':\n        return <input type=\"file\" accept={field.accept || '*'} placeholder={field.placeholder || customLabels?.placeholders?.file || 'Select file...'} name={field.name || 'file'} disabled={field.readonly} required={field.required} />;\n      case 'note':\n        return <p className=\"note\">{field.value}</p>;\n      case 'date':\n        return <input type=\"date\" {...inputProps(customLabels?.placeholders?.date || 'Enter date...')} />;\n      case 'text':\n      default:\n        return <input type=\"text\" {...inputProps(customLabels?.placeholders?.text || 'Enter text...')} />;\n    }\n  }\n\n  return (\n    <div className={`form-row ${direction || 'row'}`}>\n      {\n        field.type !== 'hidden' &&\n        <label>{field.label || field.originalName}{field.required ? ' *' : ''}</label>\n      }\n      {renderFieldInput(field, onChange)}\n      {\n        (showReset && !field.readonly && field.value && field.value.length > 0) &&\n        <i title={clearLabel} onClick={() => onChange(field.name, '', true)} aria-label=\"Clear\" className=\"clear-input fa fa-times\"></i>\n      }\n    </div>\n  );\n});\n"]},"metadata":{},"sourceType":"module"}