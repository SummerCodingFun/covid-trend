{"ast":null,"code":"import _toConsumableArray from\"/Users/claire/Desktop/covid-trend/RESTool2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _slicedToArray from\"/Users/claire/Desktop/covid-trend/RESTool2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from'react';import{FormRow}from'../formRow/formRow.comp';import{Button}from'../button/button.comp';import'./queryParams.scss';export var QueryParams=function QueryParams(_ref){var initialParams=_ref.initialParams,paginationConfig=_ref.paginationConfig,submitCallback=_ref.submitCallback;var _useState=useState(initialParams),_useState2=_slicedToArray(_useState,2),queryParams=_useState2[0],setQueryParams=_useState2[1];function submit(e){if(e){e.preventDefault();}if(paginationConfig&&paginationConfig.type==='infinite-scroll'){submitCallback(queryParams,true);}else{submitCallback(queryParams);}}function formChanged(fieldName,value,submitAfterChange){var updatedQueryParams=_toConsumableArray(queryParams).map(function(field){if(field.name===fieldName){field.value=value;}return field;});setQueryParams(updatedQueryParams);if(submitAfterChange){submit();}}useEffect(function(){if(paginationConfig&&paginationConfig.type==='infinite-scroll'){var filteredParams=initialParams.filter(function(param){return!['page','limit'].includes(param.name);});setQueryParams(filteredParams);}else{setQueryParams(initialParams);}},[paginationConfig,initialParams]);if(!queryParams.length){return React.createElement(React.Fragment,null);}return React.createElement(\"section\",{className:\"query-params-form\"},React.createElement(\"h5\",null,\"Query Params:\"),React.createElement(\"form\",{onSubmit:submit},queryParams.map(function(queryParam,idx){return React.createElement(FormRow,{key:\"query_param_\".concat(idx),field:queryParam,onChange:formChanged,showReset:!queryParam.type||queryParam.type==='text'});}),React.createElement(Button,{type:\"submit\",onClick:submit},\"Submit\")));};","map":{"version":3,"sources":["/Users/claire/Desktop/covid-trend/RESTool2/src/components/queryParams/queryParams.comp.tsx"],"names":["React","useState","useEffect","FormRow","Button","QueryParams","initialParams","paginationConfig","submitCallback","queryParams","setQueryParams","submit","e","preventDefault","type","formChanged","fieldName","value","submitAfterChange","updatedQueryParams","map","field","name","filteredParams","filter","param","includes","length","queryParam","idx"],"mappings":"0UAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,SAA1B,KAA2C,OAA3C,CAGA,OAASC,OAAT,KAAwB,yBAAxB,CACA,OAASC,MAAT,KAAuB,uBAAvB,CAEA,MAAO,oBAAP,CAQA,MAAO,IAAMC,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,MAAiE,IAA9DC,CAAAA,aAA8D,MAA9DA,aAA8D,CAA/CC,gBAA+C,MAA/CA,gBAA+C,CAA7BC,cAA6B,MAA7BA,cAA6B,eACpDP,QAAQ,CAAsBK,aAAtB,CAD4C,wCACnFG,WADmF,eACtEC,cADsE,eAG1F,QAASC,CAAAA,MAAT,CAAgBC,CAAhB,CAAyB,CACvB,GAAIA,CAAJ,CAAO,CACLA,CAAC,CAACC,cAAF,GACD,CAED,GAAIN,gBAAgB,EAAIA,gBAAgB,CAACO,IAAjB,GAA0B,iBAAlD,CAAqE,CACnEN,cAAc,CAACC,WAAD,CAAc,IAAd,CAAd,CACD,CAFD,IAEO,CACLD,cAAc,CAACC,WAAD,CAAd,CACD,CACF,CAED,QAASM,CAAAA,WAAT,CAAqBC,SAArB,CAAwCC,KAAxC,CAAoDC,iBAApD,CAAiF,CAC/E,GAAMC,CAAAA,kBAAuC,CAAG,mBAAIV,WAAJ,EAAiBW,GAAjB,CAAqB,SAACC,KAAD,CAAW,CAC9E,GAAIA,KAAK,CAACC,IAAN,GAAeN,SAAnB,CAA8B,CAC5BK,KAAK,CAACJ,KAAN,CAAcA,KAAd,CACD,CAED,MAAOI,CAAAA,KAAP,CACD,CAN+C,CAAhD,CAQAX,cAAc,CAACS,kBAAD,CAAd,CAEA,GAAID,iBAAJ,CAAuB,CACrBP,MAAM,GACP,CACF,CAEDT,SAAS,CAAC,UAAM,CACd,GAAIK,gBAAgB,EAAIA,gBAAgB,CAACO,IAAjB,GAA0B,iBAAlD,CAAqE,CACnE,GAAMS,CAAAA,cAAc,CAAGjB,aAAa,CAACkB,MAAd,CAAqB,SAAAC,KAAK,QAAI,CAAC,CAAC,MAAD,CAAS,OAAT,EAAkBC,QAAlB,CAA2BD,KAAK,CAACH,IAAjC,CAAL,EAA1B,CAAvB,CACAZ,cAAc,CAACa,cAAD,CAAd,CACD,CAHD,IAGO,CACLb,cAAc,CAACJ,aAAD,CAAd,CACD,CACF,CAPQ,CAON,CAACC,gBAAD,CAAmBD,aAAnB,CAPM,CAAT,CASA,GAAI,CAACG,WAAW,CAACkB,MAAjB,CAAyB,CACvB,MAAO,qBAAC,KAAD,CAAO,QAAP,MAAP,CACD,CAED,MACE,gCAAS,SAAS,CAAC,mBAAnB,EACE,8CADF,CAEE,4BAAM,QAAQ,CAAEhB,MAAhB,EAEIF,WAAW,CAACW,GAAZ,CAAgB,SAACQ,UAAD,CAAaC,GAAb,CAAqB,CACnC,MACE,qBAAC,OAAD,EACE,GAAG,uBAAiBA,GAAjB,CADL,CAEE,KAAK,CAAED,UAFT,CAGE,QAAQ,CAAEb,WAHZ,CAIE,SAAS,CAAE,CAACa,UAAU,CAACd,IAAZ,EAAoBc,UAAU,CAACd,IAAX,GAAoB,MAJrD,EADF,CAQD,CATD,CAFJ,CAaE,oBAAC,MAAD,EAAQ,IAAI,CAAC,QAAb,CAAsB,OAAO,CAAEH,MAA/B,WAbF,CAFF,CADF,CAoBD,CAhEM","sourcesContent":["import React, { useState, useEffect } from 'react';\n\nimport { IConfigInputField, IConfigPagination } from '../../common/models/config.model';\nimport { FormRow } from '../formRow/formRow.comp';\nimport { Button } from '../button/button.comp';\n\nimport './queryParams.scss';\n\ninterface IProps {\n  initialParams: IConfigInputField[]\n  paginationConfig?: IConfigPagination\n  submitCallback: (queryParams: IConfigInputField[], reset?: boolean) => void\n}\n\nexport const QueryParams = ({ initialParams, paginationConfig, submitCallback }: IProps) => {\n  const [queryParams, setQueryParams] = useState<IConfigInputField[]>(initialParams);\n\n  function submit(e?: any) {\n    if (e) {\n      e.preventDefault();\n    }\n\n    if (paginationConfig && paginationConfig.type === 'infinite-scroll') {\n      submitCallback(queryParams, true);\n    } else {\n      submitCallback(queryParams);\n    }\n  }\n\n  function formChanged(fieldName: string, value: any, submitAfterChange?: boolean) {\n    const updatedQueryParams: IConfigInputField[] = [...queryParams].map((field) => {\n      if (field.name === fieldName) {\n        field.value = value;\n      }\n\n      return field;\n    });\n\n    setQueryParams(updatedQueryParams);\n\n    if (submitAfterChange) {\n      submit();\n    }\n  }\n\n  useEffect(() => {\n    if (paginationConfig && paginationConfig.type === 'infinite-scroll') {\n      const filteredParams = initialParams.filter(param => !['page', 'limit'].includes(param.name));\n      setQueryParams(filteredParams);\n    } else {\n      setQueryParams(initialParams);\n    }\n  }, [paginationConfig, initialParams]);\n\n  if (!queryParams.length) {\n    return <React.Fragment></React.Fragment>;\n  }\n\n  return (\n    <section className=\"query-params-form\">\n      <h5>Query Params:</h5>\n      <form onSubmit={submit}>\n        {\n          queryParams.map((queryParam, idx) => {\n            return (\n              <FormRow\n                key={`query_param_${idx}`}\n                field={queryParam}\n                onChange={formChanged}\n                showReset={!queryParam.type || queryParam.type === 'text'}\n              />\n            );\n          })\n        }\n        <Button type=\"submit\" onClick={submit}>Submit</Button>\n      </form>\n    </section>\n  );\n};"]},"metadata":{},"sourceType":"module"}